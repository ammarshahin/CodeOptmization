
FlashSize.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000220  00800100  00000c6e  00000ce2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c6e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000f02  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f34  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bb8  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c9  00000000  00000000  00001bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008fe  00000000  00000000  00002495  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001dc  00000000  00000000  00002d94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000441  00000000  00000000  00002f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000383  00000000  00000000  000033b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003734  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	13 e0       	ldi	r17, 0x03	; 3
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <main>
  8e:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <mul2>:
 * Multiply two numbers in the GF(2^8) finite field defined
 * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
static inline uint8_t mul2(uint8_t a) {
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	89 83       	std	Y+1, r24	; 0x01
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	88 23       	and	r24, r24
  a6:	4c f4       	brge	.+18     	; 0xba <mul2+0x24>
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	88 2f       	mov	r24, r24
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	98 2f       	mov	r25, r24
  b4:	8b e1       	ldi	r24, 0x1B	; 27
  b6:	89 27       	eor	r24, r25
  b8:	02 c0       	rjmp	.+4      	; 0xbe <mul2+0x28>
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	88 0f       	add	r24, r24
}
  be:	0f 90       	pop	r0
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <inv_shift_rows>:
 *  Row0: s0  s4  s8  s12   >>> 0 byte
 *  Row1: s1  s5  s9  s13   >>> 1 byte
 *  Row2: s2  s6  s10 s14   >>> 2 bytes
 *  Row3: s3  s7  s11 s15   >>> 3 bytes
 */
static uint8_t inv_shift_rows(uint8_t *state) {
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	00 d0       	rcall	.+0      	; 0xcc <inv_shift_rows+0x6>
  cc:	1f 92       	push	r1
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	9b 83       	std	Y+3, r25	; 0x03
  d4:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp;
    // row1
    temp        = *(state+13);
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	9b 81       	ldd	r25, Y+3	; 0x03
  da:	fc 01       	movw	r30, r24
  dc:	85 85       	ldd	r24, Z+13	; 0x0d
  de:	89 83       	std	Y+1, r24	; 0x01
    *(state+13) = *(state+9);
  e0:	8a 81       	ldd	r24, Y+2	; 0x02
  e2:	9b 81       	ldd	r25, Y+3	; 0x03
  e4:	0d 96       	adiw	r24, 0x0d	; 13
  e6:	2a 81       	ldd	r18, Y+2	; 0x02
  e8:	3b 81       	ldd	r19, Y+3	; 0x03
  ea:	f9 01       	movw	r30, r18
  ec:	21 85       	ldd	r18, Z+9	; 0x09
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
    *(state+9)  = *(state+5);
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	9b 81       	ldd	r25, Y+3	; 0x03
  f6:	09 96       	adiw	r24, 0x09	; 9
  f8:	2a 81       	ldd	r18, Y+2	; 0x02
  fa:	3b 81       	ldd	r19, Y+3	; 0x03
  fc:	f9 01       	movw	r30, r18
  fe:	25 81       	ldd	r18, Z+5	; 0x05
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
    *(state+5)  = *(state+1);
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	9b 81       	ldd	r25, Y+3	; 0x03
 108:	05 96       	adiw	r24, 0x05	; 5
 10a:	2a 81       	ldd	r18, Y+2	; 0x02
 10c:	3b 81       	ldd	r19, Y+3	; 0x03
 10e:	f9 01       	movw	r30, r18
 110:	21 81       	ldd	r18, Z+1	; 0x01
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
    *(state+1)  = temp;
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	9b 81       	ldd	r25, Y+3	; 0x03
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	29 81       	ldd	r18, Y+1	; 0x01
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
    // row2
    temp        = *(state+14);
 122:	8a 81       	ldd	r24, Y+2	; 0x02
 124:	9b 81       	ldd	r25, Y+3	; 0x03
 126:	fc 01       	movw	r30, r24
 128:	86 85       	ldd	r24, Z+14	; 0x0e
 12a:	89 83       	std	Y+1, r24	; 0x01
    *(state+14) = *(state+6);
 12c:	8a 81       	ldd	r24, Y+2	; 0x02
 12e:	9b 81       	ldd	r25, Y+3	; 0x03
 130:	0e 96       	adiw	r24, 0x0e	; 14
 132:	2a 81       	ldd	r18, Y+2	; 0x02
 134:	3b 81       	ldd	r19, Y+3	; 0x03
 136:	f9 01       	movw	r30, r18
 138:	26 81       	ldd	r18, Z+6	; 0x06
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
    *(state+6)  = temp;
 13e:	8a 81       	ldd	r24, Y+2	; 0x02
 140:	9b 81       	ldd	r25, Y+3	; 0x03
 142:	06 96       	adiw	r24, 0x06	; 6
 144:	29 81       	ldd	r18, Y+1	; 0x01
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
    temp        = *(state+10);
 14a:	8a 81       	ldd	r24, Y+2	; 0x02
 14c:	9b 81       	ldd	r25, Y+3	; 0x03
 14e:	fc 01       	movw	r30, r24
 150:	82 85       	ldd	r24, Z+10	; 0x0a
 152:	89 83       	std	Y+1, r24	; 0x01
    *(state+10) = *(state+2);
 154:	8a 81       	ldd	r24, Y+2	; 0x02
 156:	9b 81       	ldd	r25, Y+3	; 0x03
 158:	0a 96       	adiw	r24, 0x0a	; 10
 15a:	2a 81       	ldd	r18, Y+2	; 0x02
 15c:	3b 81       	ldd	r19, Y+3	; 0x03
 15e:	f9 01       	movw	r30, r18
 160:	22 81       	ldd	r18, Z+2	; 0x02
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
    *(state+2)  = temp;
 166:	8a 81       	ldd	r24, Y+2	; 0x02
 168:	9b 81       	ldd	r25, Y+3	; 0x03
 16a:	02 96       	adiw	r24, 0x02	; 2
 16c:	29 81       	ldd	r18, Y+1	; 0x01
 16e:	fc 01       	movw	r30, r24
 170:	20 83       	st	Z, r18
    // row3
    temp        = *(state+3);
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	9b 81       	ldd	r25, Y+3	; 0x03
 176:	fc 01       	movw	r30, r24
 178:	83 81       	ldd	r24, Z+3	; 0x03
 17a:	89 83       	std	Y+1, r24	; 0x01
    *(state+3)  = *(state+7);
 17c:	8a 81       	ldd	r24, Y+2	; 0x02
 17e:	9b 81       	ldd	r25, Y+3	; 0x03
 180:	03 96       	adiw	r24, 0x03	; 3
 182:	2a 81       	ldd	r18, Y+2	; 0x02
 184:	3b 81       	ldd	r19, Y+3	; 0x03
 186:	f9 01       	movw	r30, r18
 188:	27 81       	ldd	r18, Z+7	; 0x07
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
    *(state+7)  = *(state+11);
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	9b 81       	ldd	r25, Y+3	; 0x03
 192:	07 96       	adiw	r24, 0x07	; 7
 194:	2a 81       	ldd	r18, Y+2	; 0x02
 196:	3b 81       	ldd	r19, Y+3	; 0x03
 198:	f9 01       	movw	r30, r18
 19a:	23 85       	ldd	r18, Z+11	; 0x0b
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
    *(state+11) = *(state+15);
 1a0:	8a 81       	ldd	r24, Y+2	; 0x02
 1a2:	9b 81       	ldd	r25, Y+3	; 0x03
 1a4:	0b 96       	adiw	r24, 0x0b	; 11
 1a6:	2a 81       	ldd	r18, Y+2	; 0x02
 1a8:	3b 81       	ldd	r19, Y+3	; 0x03
 1aa:	f9 01       	movw	r30, r18
 1ac:	27 85       	ldd	r18, Z+15	; 0x0f
 1ae:	fc 01       	movw	r30, r24
 1b0:	20 83       	st	Z, r18
    *(state+15) = temp;
 1b2:	8a 81       	ldd	r24, Y+2	; 0x02
 1b4:	9b 81       	ldd	r25, Y+3	; 0x03
 1b6:	0f 96       	adiw	r24, 0x0f	; 15
 1b8:	29 81       	ldd	r18, Y+1	; 0x01
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
	return temp;
 1be:	89 81       	ldd	r24, Y+1	; 0x01
}
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	0f 90       	pop	r0
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <aes_decrypt_128>:
void aes_decrypt_128(register const uint8_t *roundkeys, register const uint8_t *ciphertext,register  uint8_t *plaintext) {
 1cc:	8f 92       	push	r8
 1ce:	9f 92       	push	r9
 1d0:	af 92       	push	r10
 1d2:	bf 92       	push	r11
 1d4:	cf 92       	push	r12
 1d6:	df 92       	push	r13
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	60 97       	sbiw	r28, 0x10	; 16
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
 1f4:	6c 01       	movw	r12, r24
 1f6:	7a 01       	movw	r14, r20

    uint8_t tmp[16];
    register uint8_t t, u, v;
    register uint8_t i, j;

    roundkeys += 160;
 1f8:	80 ea       	ldi	r24, 0xA0	; 160
 1fa:	c8 0e       	add	r12, r24
 1fc:	d1 1c       	adc	r13, r1
	
    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 1fe:	10 e0       	ldi	r17, 0x00	; 0
 200:	14 c0       	rjmp	.+40     	; 0x22a <aes_decrypt_128+0x5e>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
 202:	81 2f       	mov	r24, r17
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	8e 0d       	add	r24, r14
 208:	9f 1d       	adc	r25, r15
 20a:	21 2f       	mov	r18, r17
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	26 0f       	add	r18, r22
 210:	37 1f       	adc	r19, r23
 212:	f9 01       	movw	r30, r18
 214:	40 81       	ld	r20, Z
 216:	21 2f       	mov	r18, r17
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	2c 0d       	add	r18, r12
 21c:	3d 1d       	adc	r19, r13
 21e:	f9 01       	movw	r30, r18
 220:	20 81       	ld	r18, Z
 222:	24 27       	eor	r18, r20
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18
    register uint8_t i, j;

    roundkeys += 160;
	
    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 228:	1f 5f       	subi	r17, 0xFF	; 255
 22a:	10 31       	cpi	r17, 0x10	; 16
 22c:	50 f3       	brcs	.-44     	; 0x202 <aes_decrypt_128+0x36>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
 22e:	f0 e1       	ldi	r31, 0x10	; 16
 230:	cf 1a       	sub	r12, r31
 232:	d1 08       	sbc	r13, r1
    inv_shift_rows(plaintext);
 234:	c7 01       	movw	r24, r14
 236:	0e 94 63 00 	call	0xc6	; 0xc6 <inv_shift_rows>
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 23a:	10 e0       	ldi	r17, 0x00	; 0
 23c:	13 c0       	rjmp	.+38     	; 0x264 <aes_decrypt_128+0x98>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
 23e:	81 2f       	mov	r24, r17
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	8e 0d       	add	r24, r14
 244:	9f 1d       	adc	r25, r15
 246:	21 2f       	mov	r18, r17
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	2e 0d       	add	r18, r14
 24c:	3f 1d       	adc	r19, r15
 24e:	f9 01       	movw	r30, r18
 250:	20 81       	ld	r18, Z
 252:	22 2f       	mov	r18, r18
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	20 50       	subi	r18, 0x00	; 0
 258:	3f 4f       	sbci	r19, 0xFF	; 255
 25a:	f9 01       	movw	r30, r18
 25c:	20 81       	ld	r18, Z
 25e:	fc 01       	movw	r30, r24
 260:	20 83       	st	Z, r18
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 262:	1f 5f       	subi	r17, 0xFF	; 255
 264:	10 31       	cpi	r17, 0x10	; 16
 266:	58 f3       	brcs	.-42     	; 0x23e <aes_decrypt_128+0x72>
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }
	j=AES_ROUNDS;
 268:	0f 2e       	mov	r0, r31
 26a:	fa e0       	ldi	r31, 0x0A	; 10
 26c:	9f 2e       	mov	r9, r31
 26e:	f0 2d       	mov	r31, r0
    while(--j){
 270:	91 c1       	rjmp	.+802    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 272:	10 e0       	ldi	r17, 0x00	; 0
 274:	17 c0       	rjmp	.+46     	; 0x2a4 <aes_decrypt_128+0xd8>
            *(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);
 276:	81 2f       	mov	r24, r17
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	9e 01       	movw	r18, r28
 27c:	2f 5f       	subi	r18, 0xFF	; 255
 27e:	3f 4f       	sbci	r19, 0xFF	; 255
 280:	82 0f       	add	r24, r18
 282:	93 1f       	adc	r25, r19
 284:	21 2f       	mov	r18, r17
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	2e 0d       	add	r18, r14
 28a:	3f 1d       	adc	r19, r15
 28c:	f9 01       	movw	r30, r18
 28e:	40 81       	ld	r20, Z
 290:	21 2f       	mov	r18, r17
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	2c 0d       	add	r18, r12
 296:	3d 1d       	adc	r19, r13
 298:	f9 01       	movw	r30, r18
 29a:	20 81       	ld	r18, Z
 29c:	24 27       	eor	r18, r20
 29e:	fc 01       	movw	r30, r24
 2a0:	20 83       	st	Z, r18
    }
	j=AES_ROUNDS;
    while(--j){
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 2a2:	1f 5f       	subi	r17, 0xFF	; 255
 2a4:	10 31       	cpi	r17, 0x10	; 16
 2a6:	38 f3       	brcs	.-50     	; 0x276 <aes_decrypt_128+0xaa>
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	54 c1       	rjmp	.+680    	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
 2ac:	81 2f       	mov	r24, r17
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	9e 01       	movw	r18, r28
 2b2:	2f 5f       	subi	r18, 0xFF	; 255
 2b4:	3f 4f       	sbci	r19, 0xFF	; 255
 2b6:	82 0f       	add	r24, r18
 2b8:	93 1f       	adc	r25, r19
 2ba:	fc 01       	movw	r30, r24
 2bc:	40 81       	ld	r20, Z
 2be:	81 2f       	mov	r24, r17
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	9e 01       	movw	r18, r28
 2c6:	2f 5f       	subi	r18, 0xFF	; 255
 2c8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ca:	82 0f       	add	r24, r18
 2cc:	93 1f       	adc	r25, r19
 2ce:	fc 01       	movw	r30, r24
 2d0:	80 81       	ld	r24, Z
 2d2:	48 27       	eor	r20, r24
 2d4:	81 2f       	mov	r24, r17
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 96       	adiw	r24, 0x02	; 2
 2da:	9e 01       	movw	r18, r28
 2dc:	2f 5f       	subi	r18, 0xFF	; 255
 2de:	3f 4f       	sbci	r19, 0xFF	; 255
 2e0:	82 0f       	add	r24, r18
 2e2:	93 1f       	adc	r25, r19
 2e4:	fc 01       	movw	r30, r24
 2e6:	80 81       	ld	r24, Z
 2e8:	48 27       	eor	r20, r24
 2ea:	81 2f       	mov	r24, r17
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	03 96       	adiw	r24, 0x03	; 3
 2f0:	9e 01       	movw	r18, r28
 2f2:	2f 5f       	subi	r18, 0xFF	; 255
 2f4:	3f 4f       	sbci	r19, 0xFF	; 255
 2f6:	82 0f       	add	r24, r18
 2f8:	93 1f       	adc	r25, r19
 2fa:	fc 01       	movw	r30, r24
 2fc:	80 81       	ld	r24, Z
 2fe:	04 2f       	mov	r16, r20
 300:	08 27       	eor	r16, r24
            plaintext[i]   = t ^ tmp[i]   ^ mul2(tmp[i]   ^ tmp[i+1]);
 302:	81 2f       	mov	r24, r17
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	57 01       	movw	r10, r14
 308:	a8 0e       	add	r10, r24
 30a:	b9 1e       	adc	r11, r25
 30c:	81 2f       	mov	r24, r17
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	9e 01       	movw	r18, r28
 312:	2f 5f       	subi	r18, 0xFF	; 255
 314:	3f 4f       	sbci	r19, 0xFF	; 255
 316:	82 0f       	add	r24, r18
 318:	93 1f       	adc	r25, r19
 31a:	fc 01       	movw	r30, r24
 31c:	80 81       	ld	r24, Z
 31e:	88 2e       	mov	r8, r24
 320:	80 26       	eor	r8, r16
 322:	81 2f       	mov	r24, r17
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	9e 01       	movw	r18, r28
 328:	2f 5f       	subi	r18, 0xFF	; 255
 32a:	3f 4f       	sbci	r19, 0xFF	; 255
 32c:	82 0f       	add	r24, r18
 32e:	93 1f       	adc	r25, r19
 330:	fc 01       	movw	r30, r24
 332:	40 81       	ld	r20, Z
 334:	81 2f       	mov	r24, r17
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	9e 01       	movw	r18, r28
 33c:	2f 5f       	subi	r18, 0xFF	; 255
 33e:	3f 4f       	sbci	r19, 0xFF	; 255
 340:	82 0f       	add	r24, r18
 342:	93 1f       	adc	r25, r19
 344:	fc 01       	movw	r30, r24
 346:	80 81       	ld	r24, Z
 348:	84 27       	eor	r24, r20
 34a:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 34e:	88 25       	eor	r24, r8
 350:	f5 01       	movw	r30, r10
 352:	80 83       	st	Z, r24
            plaintext[i+1] = t ^ tmp[i+1] ^ mul2(tmp[i+1] ^ tmp[i+2]);
 354:	81 2f       	mov	r24, r17
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	01 96       	adiw	r24, 0x01	; 1
 35a:	57 01       	movw	r10, r14
 35c:	a8 0e       	add	r10, r24
 35e:	b9 1e       	adc	r11, r25
 360:	81 2f       	mov	r24, r17
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	9e 01       	movw	r18, r28
 368:	2f 5f       	subi	r18, 0xFF	; 255
 36a:	3f 4f       	sbci	r19, 0xFF	; 255
 36c:	82 0f       	add	r24, r18
 36e:	93 1f       	adc	r25, r19
 370:	fc 01       	movw	r30, r24
 372:	80 81       	ld	r24, Z
 374:	88 2e       	mov	r8, r24
 376:	80 26       	eor	r8, r16
 378:	81 2f       	mov	r24, r17
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	9e 01       	movw	r18, r28
 380:	2f 5f       	subi	r18, 0xFF	; 255
 382:	3f 4f       	sbci	r19, 0xFF	; 255
 384:	82 0f       	add	r24, r18
 386:	93 1f       	adc	r25, r19
 388:	fc 01       	movw	r30, r24
 38a:	40 81       	ld	r20, Z
 38c:	81 2f       	mov	r24, r17
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 96       	adiw	r24, 0x02	; 2
 392:	9e 01       	movw	r18, r28
 394:	2f 5f       	subi	r18, 0xFF	; 255
 396:	3f 4f       	sbci	r19, 0xFF	; 255
 398:	82 0f       	add	r24, r18
 39a:	93 1f       	adc	r25, r19
 39c:	fc 01       	movw	r30, r24
 39e:	80 81       	ld	r24, Z
 3a0:	84 27       	eor	r24, r20
 3a2:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 3a6:	88 25       	eor	r24, r8
 3a8:	f5 01       	movw	r30, r10
 3aa:	80 83       	st	Z, r24
            plaintext[i+2] = t ^ tmp[i+2] ^ mul2(tmp[i+2] ^ tmp[i+3]);
 3ac:	81 2f       	mov	r24, r17
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 96       	adiw	r24, 0x02	; 2
 3b2:	57 01       	movw	r10, r14
 3b4:	a8 0e       	add	r10, r24
 3b6:	b9 1e       	adc	r11, r25
 3b8:	81 2f       	mov	r24, r17
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 96       	adiw	r24, 0x02	; 2
 3be:	9e 01       	movw	r18, r28
 3c0:	2f 5f       	subi	r18, 0xFF	; 255
 3c2:	3f 4f       	sbci	r19, 0xFF	; 255
 3c4:	82 0f       	add	r24, r18
 3c6:	93 1f       	adc	r25, r19
 3c8:	fc 01       	movw	r30, r24
 3ca:	80 81       	ld	r24, Z
 3cc:	88 2e       	mov	r8, r24
 3ce:	80 26       	eor	r8, r16
 3d0:	81 2f       	mov	r24, r17
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 96       	adiw	r24, 0x02	; 2
 3d6:	9e 01       	movw	r18, r28
 3d8:	2f 5f       	subi	r18, 0xFF	; 255
 3da:	3f 4f       	sbci	r19, 0xFF	; 255
 3dc:	82 0f       	add	r24, r18
 3de:	93 1f       	adc	r25, r19
 3e0:	fc 01       	movw	r30, r24
 3e2:	40 81       	ld	r20, Z
 3e4:	81 2f       	mov	r24, r17
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	03 96       	adiw	r24, 0x03	; 3
 3ea:	9e 01       	movw	r18, r28
 3ec:	2f 5f       	subi	r18, 0xFF	; 255
 3ee:	3f 4f       	sbci	r19, 0xFF	; 255
 3f0:	82 0f       	add	r24, r18
 3f2:	93 1f       	adc	r25, r19
 3f4:	fc 01       	movw	r30, r24
 3f6:	80 81       	ld	r24, Z
 3f8:	84 27       	eor	r24, r20
 3fa:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 3fe:	88 25       	eor	r24, r8
 400:	f5 01       	movw	r30, r10
 402:	80 83       	st	Z, r24
            plaintext[i+3] = t ^ tmp[i+3] ^ mul2(tmp[i+3] ^ tmp[i]);
 404:	81 2f       	mov	r24, r17
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	03 96       	adiw	r24, 0x03	; 3
 40a:	57 01       	movw	r10, r14
 40c:	a8 0e       	add	r10, r24
 40e:	b9 1e       	adc	r11, r25
 410:	81 2f       	mov	r24, r17
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	03 96       	adiw	r24, 0x03	; 3
 416:	9e 01       	movw	r18, r28
 418:	2f 5f       	subi	r18, 0xFF	; 255
 41a:	3f 4f       	sbci	r19, 0xFF	; 255
 41c:	82 0f       	add	r24, r18
 41e:	93 1f       	adc	r25, r19
 420:	fc 01       	movw	r30, r24
 422:	80 81       	ld	r24, Z
 424:	08 27       	eor	r16, r24
 426:	81 2f       	mov	r24, r17
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	03 96       	adiw	r24, 0x03	; 3
 42c:	9e 01       	movw	r18, r28
 42e:	2f 5f       	subi	r18, 0xFF	; 255
 430:	3f 4f       	sbci	r19, 0xFF	; 255
 432:	82 0f       	add	r24, r18
 434:	93 1f       	adc	r25, r19
 436:	fc 01       	movw	r30, r24
 438:	40 81       	ld	r20, Z
 43a:	81 2f       	mov	r24, r17
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	9e 01       	movw	r18, r28
 440:	2f 5f       	subi	r18, 0xFF	; 255
 442:	3f 4f       	sbci	r19, 0xFF	; 255
 444:	82 0f       	add	r24, r18
 446:	93 1f       	adc	r25, r19
 448:	fc 01       	movw	r30, r24
 44a:	80 81       	ld	r24, Z
 44c:	84 27       	eor	r24, r20
 44e:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 452:	80 27       	eor	r24, r16
 454:	f5 01       	movw	r30, r10
 456:	80 83       	st	Z, r24
            u = mul2(mul2(tmp[i]   ^ tmp[i+2]));
 458:	81 2f       	mov	r24, r17
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	9e 01       	movw	r18, r28
 45e:	2f 5f       	subi	r18, 0xFF	; 255
 460:	3f 4f       	sbci	r19, 0xFF	; 255
 462:	82 0f       	add	r24, r18
 464:	93 1f       	adc	r25, r19
 466:	fc 01       	movw	r30, r24
 468:	40 81       	ld	r20, Z
 46a:	81 2f       	mov	r24, r17
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	02 96       	adiw	r24, 0x02	; 2
 470:	9e 01       	movw	r18, r28
 472:	2f 5f       	subi	r18, 0xFF	; 255
 474:	3f 4f       	sbci	r19, 0xFF	; 255
 476:	82 0f       	add	r24, r18
 478:	93 1f       	adc	r25, r19
 47a:	fc 01       	movw	r30, r24
 47c:	80 81       	ld	r24, Z
 47e:	84 27       	eor	r24, r20
 480:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 484:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 488:	a8 2e       	mov	r10, r24
            v = mul2(mul2(tmp[i+1] ^ tmp[i+3]));
 48a:	81 2f       	mov	r24, r17
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	9e 01       	movw	r18, r28
 492:	2f 5f       	subi	r18, 0xFF	; 255
 494:	3f 4f       	sbci	r19, 0xFF	; 255
 496:	82 0f       	add	r24, r18
 498:	93 1f       	adc	r25, r19
 49a:	fc 01       	movw	r30, r24
 49c:	40 81       	ld	r20, Z
 49e:	81 2f       	mov	r24, r17
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	03 96       	adiw	r24, 0x03	; 3
 4a4:	9e 01       	movw	r18, r28
 4a6:	2f 5f       	subi	r18, 0xFF	; 255
 4a8:	3f 4f       	sbci	r19, 0xFF	; 255
 4aa:	82 0f       	add	r24, r18
 4ac:	93 1f       	adc	r25, r19
 4ae:	fc 01       	movw	r30, r24
 4b0:	80 81       	ld	r24, Z
 4b2:	84 27       	eor	r24, r20
 4b4:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 4b8:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 4bc:	b8 2e       	mov	r11, r24
            t = mul2(u ^ v);
 4be:	8a 2d       	mov	r24, r10
 4c0:	8b 25       	eor	r24, r11
 4c2:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
 4c6:	08 2f       	mov	r16, r24
            plaintext[i]   ^= t ^ u;
 4c8:	81 2f       	mov	r24, r17
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	8e 0d       	add	r24, r14
 4ce:	9f 1d       	adc	r25, r15
 4d0:	21 2f       	mov	r18, r17
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	2e 0d       	add	r18, r14
 4d6:	3f 1d       	adc	r19, r15
 4d8:	f9 01       	movw	r30, r18
 4da:	30 81       	ld	r19, Z
 4dc:	20 2f       	mov	r18, r16
 4de:	2a 25       	eor	r18, r10
 4e0:	23 27       	eor	r18, r19
 4e2:	fc 01       	movw	r30, r24
 4e4:	20 83       	st	Z, r18
            plaintext[i+1] ^= t ^ v;
 4e6:	81 2f       	mov	r24, r17
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	01 96       	adiw	r24, 0x01	; 1
 4ec:	8e 0d       	add	r24, r14
 4ee:	9f 1d       	adc	r25, r15
 4f0:	21 2f       	mov	r18, r17
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	2f 5f       	subi	r18, 0xFF	; 255
 4f6:	3f 4f       	sbci	r19, 0xFF	; 255
 4f8:	2e 0d       	add	r18, r14
 4fa:	3f 1d       	adc	r19, r15
 4fc:	f9 01       	movw	r30, r18
 4fe:	30 81       	ld	r19, Z
 500:	20 2f       	mov	r18, r16
 502:	2b 25       	eor	r18, r11
 504:	23 27       	eor	r18, r19
 506:	fc 01       	movw	r30, r24
 508:	20 83       	st	Z, r18
            plaintext[i+2] ^= t ^ u;
 50a:	81 2f       	mov	r24, r17
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	02 96       	adiw	r24, 0x02	; 2
 510:	8e 0d       	add	r24, r14
 512:	9f 1d       	adc	r25, r15
 514:	21 2f       	mov	r18, r17
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	2e 5f       	subi	r18, 0xFE	; 254
 51a:	3f 4f       	sbci	r19, 0xFF	; 255
 51c:	2e 0d       	add	r18, r14
 51e:	3f 1d       	adc	r19, r15
 520:	f9 01       	movw	r30, r18
 522:	30 81       	ld	r19, Z
 524:	20 2f       	mov	r18, r16
 526:	2a 25       	eor	r18, r10
 528:	23 27       	eor	r18, r19
 52a:	fc 01       	movw	r30, r24
 52c:	20 83       	st	Z, r18
            plaintext[i+3] ^= t ^ v;
 52e:	81 2f       	mov	r24, r17
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	03 96       	adiw	r24, 0x03	; 3
 534:	8e 0d       	add	r24, r14
 536:	9f 1d       	adc	r25, r15
 538:	21 2f       	mov	r18, r17
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	2d 5f       	subi	r18, 0xFD	; 253
 53e:	3f 4f       	sbci	r19, 0xFF	; 255
 540:	2e 0d       	add	r18, r14
 542:	3f 1d       	adc	r19, r15
 544:	f9 01       	movw	r30, r18
 546:	30 81       	ld	r19, Z
 548:	20 2f       	mov	r18, r16
 54a:	2b 25       	eor	r18, r11
 54c:	23 27       	eor	r18, r19
 54e:	fc 01       	movw	r30, r24
 550:	20 83       	st	Z, r18
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
 552:	1c 5f       	subi	r17, 0xFC	; 252
 554:	10 31       	cpi	r17, 0x10	; 16
 556:	08 f4       	brcc	.+2      	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
 558:	a9 ce       	rjmp	.-686    	; 0x2ac <aes_decrypt_128+0xe0>
            plaintext[i+2] ^= t ^ u;
            plaintext[i+3] ^= t ^ v;
        }
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
 55a:	c7 01       	movw	r24, r14
 55c:	0e 94 63 00 	call	0xc6	; 0xc6 <inv_shift_rows>
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 560:	10 e0       	ldi	r17, 0x00	; 0
 562:	13 c0       	rjmp	.+38     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
 564:	81 2f       	mov	r24, r17
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	8e 0d       	add	r24, r14
 56a:	9f 1d       	adc	r25, r15
 56c:	21 2f       	mov	r18, r17
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	2e 0d       	add	r18, r14
 572:	3f 1d       	adc	r19, r15
 574:	f9 01       	movw	r30, r18
 576:	20 81       	ld	r18, Z
 578:	22 2f       	mov	r18, r18
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	20 50       	subi	r18, 0x00	; 0
 57e:	3f 4f       	sbci	r19, 0xFF	; 255
 580:	f9 01       	movw	r30, r18
 582:	20 81       	ld	r18, Z
 584:	fc 01       	movw	r30, r24
 586:	20 83       	st	Z, r18
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 588:	1f 5f       	subi	r17, 0xFF	; 255
 58a:	10 31       	cpi	r17, 0x10	; 16
 58c:	58 f3       	brcs	.-42     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
            *(plaintext+i) = INV_SBOX[*(plaintext+i)];
        }

        roundkeys -= 16;
 58e:	f0 e1       	ldi	r31, 0x10	; 16
 590:	cf 1a       	sub	r12, r31
 592:	d1 08       	sbc	r13, r1
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(plaintext+i) = INV_SBOX[*(plaintext+i)];
    }
	j=AES_ROUNDS;
    while(--j){
 594:	9a 94       	dec	r9
 596:	99 20       	and	r9, r9
 598:	09 f0       	breq	.+2      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 59a:	6b ce       	rjmp	.-810    	; 0x272 <aes_decrypt_128+0xa6>
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 59c:	10 e0       	ldi	r17, 0x00	; 0
 59e:	14 c0       	rjmp	.+40     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
        *(plaintext+i) ^= *(roundkeys+i);
 5a0:	81 2f       	mov	r24, r17
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	8e 0d       	add	r24, r14
 5a6:	9f 1d       	adc	r25, r15
 5a8:	21 2f       	mov	r18, r17
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	2e 0d       	add	r18, r14
 5ae:	3f 1d       	adc	r19, r15
 5b0:	f9 01       	movw	r30, r18
 5b2:	40 81       	ld	r20, Z
 5b4:	21 2f       	mov	r18, r17
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	2c 0d       	add	r18, r12
 5ba:	3d 1d       	adc	r19, r13
 5bc:	f9 01       	movw	r30, r18
 5be:	20 81       	ld	r18, Z
 5c0:	24 27       	eor	r18, r20
 5c2:	fc 01       	movw	r30, r24
 5c4:	20 83       	st	Z, r18
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 5c6:	1f 5f       	subi	r17, 0xFF	; 255
 5c8:	10 31       	cpi	r17, 0x10	; 16
 5ca:	50 f3       	brcs	.-44     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
        *(plaintext+i) ^= *(roundkeys+i);
    }

 5cc:	00 00       	nop
 5ce:	60 96       	adiw	r28, 0x10	; 16
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	f8 94       	cli
 5d4:	de bf       	out	0x3e, r29	; 62
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	cd bf       	out	0x3d, r28	; 61
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	1f 91       	pop	r17
 5e0:	0f 91       	pop	r16
 5e2:	ff 90       	pop	r15
 5e4:	ef 90       	pop	r14
 5e6:	df 90       	pop	r13
 5e8:	cf 90       	pop	r12
 5ea:	bf 90       	pop	r11
 5ec:	af 90       	pop	r10
 5ee:	9f 90       	pop	r9
 5f0:	8f 90       	pop	r8
 5f2:	08 95       	ret

000005f4 <mul2>:
 * Multiply two numbers in the GF(2^8) finite field defined
 * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
static uint8_t mul2(uint8_t a) {
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	1f 92       	push	r1
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	89 83       	std	Y+1, r24	; 0x01
    return (((a)&0x80) ? (((a)<<1)^0x1b) : ((a)<<1));
 600:	89 81       	ldd	r24, Y+1	; 0x01
 602:	88 23       	and	r24, r24
 604:	4c f4       	brge	.+18     	; 0x618 <mul2+0x24>
 606:	89 81       	ldd	r24, Y+1	; 0x01
 608:	88 2f       	mov	r24, r24
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	98 2f       	mov	r25, r24
 612:	8b e1       	ldi	r24, 0x1B	; 27
 614:	89 27       	eor	r24, r25
 616:	02 c0       	rjmp	.+4      	; 0x61c <mul2+0x28>
 618:	89 81       	ldd	r24, Y+1	; 0x01
 61a:	88 0f       	add	r24, r24
}
 61c:	0f 90       	pop	r0
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	08 95       	ret

00000624 <shift_rows>:
 *  Row0: s0  s4  s8  s12   <<< 0 byte
 *  Row1: s1  s5  s9  s13   <<< 1 byte
 *  Row2: s2  s6  s10 s14   <<< 2 bytes
 *  Row3: s3  s7  s11 s15   <<< 3 bytes
 */
static void shift_rows(register uint8_t *state) {
 624:	1f 93       	push	r17
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
    register uint8_t temp;
    // row1
    temp        = *(state+1);
 62e:	fc 01       	movw	r30, r24
 630:	11 81       	ldd	r17, Z+1	; 0x01
    *(state+1)  = *(state+5);
 632:	9c 01       	movw	r18, r24
 634:	2f 5f       	subi	r18, 0xFF	; 255
 636:	3f 4f       	sbci	r19, 0xFF	; 255
 638:	fc 01       	movw	r30, r24
 63a:	45 81       	ldd	r20, Z+5	; 0x05
 63c:	f9 01       	movw	r30, r18
 63e:	40 83       	st	Z, r20
    *(state+5)  = *(state+9);
 640:	9c 01       	movw	r18, r24
 642:	2b 5f       	subi	r18, 0xFB	; 251
 644:	3f 4f       	sbci	r19, 0xFF	; 255
 646:	fc 01       	movw	r30, r24
 648:	41 85       	ldd	r20, Z+9	; 0x09
 64a:	f9 01       	movw	r30, r18
 64c:	40 83       	st	Z, r20
    *(state+9)  = *(state+13);
 64e:	9c 01       	movw	r18, r24
 650:	27 5f       	subi	r18, 0xF7	; 247
 652:	3f 4f       	sbci	r19, 0xFF	; 255
 654:	fc 01       	movw	r30, r24
 656:	45 85       	ldd	r20, Z+13	; 0x0d
 658:	f9 01       	movw	r30, r18
 65a:	40 83       	st	Z, r20
    *(state+13) = temp;
 65c:	9c 01       	movw	r18, r24
 65e:	23 5f       	subi	r18, 0xF3	; 243
 660:	3f 4f       	sbci	r19, 0xFF	; 255
 662:	f9 01       	movw	r30, r18
 664:	10 83       	st	Z, r17
    // row2
    temp        = *(state+2);
 666:	fc 01       	movw	r30, r24
 668:	12 81       	ldd	r17, Z+2	; 0x02
    *(state+2)  = *(state+10);
 66a:	9c 01       	movw	r18, r24
 66c:	2e 5f       	subi	r18, 0xFE	; 254
 66e:	3f 4f       	sbci	r19, 0xFF	; 255
 670:	fc 01       	movw	r30, r24
 672:	42 85       	ldd	r20, Z+10	; 0x0a
 674:	f9 01       	movw	r30, r18
 676:	40 83       	st	Z, r20
    *(state+10) = temp;
 678:	9c 01       	movw	r18, r24
 67a:	26 5f       	subi	r18, 0xF6	; 246
 67c:	3f 4f       	sbci	r19, 0xFF	; 255
 67e:	f9 01       	movw	r30, r18
 680:	10 83       	st	Z, r17
    temp        = *(state+6);
 682:	fc 01       	movw	r30, r24
 684:	16 81       	ldd	r17, Z+6	; 0x06
    *(state+6)  = *(state+14);
 686:	9c 01       	movw	r18, r24
 688:	2a 5f       	subi	r18, 0xFA	; 250
 68a:	3f 4f       	sbci	r19, 0xFF	; 255
 68c:	fc 01       	movw	r30, r24
 68e:	46 85       	ldd	r20, Z+14	; 0x0e
 690:	f9 01       	movw	r30, r18
 692:	40 83       	st	Z, r20
    *(state+14) = temp;
 694:	9c 01       	movw	r18, r24
 696:	22 5f       	subi	r18, 0xF2	; 242
 698:	3f 4f       	sbci	r19, 0xFF	; 255
 69a:	f9 01       	movw	r30, r18
 69c:	10 83       	st	Z, r17
    // row3
    temp        = *(state+15);
 69e:	fc 01       	movw	r30, r24
 6a0:	17 85       	ldd	r17, Z+15	; 0x0f
    *(state+15) = *(state+11);
 6a2:	9c 01       	movw	r18, r24
 6a4:	21 5f       	subi	r18, 0xF1	; 241
 6a6:	3f 4f       	sbci	r19, 0xFF	; 255
 6a8:	fc 01       	movw	r30, r24
 6aa:	43 85       	ldd	r20, Z+11	; 0x0b
 6ac:	f9 01       	movw	r30, r18
 6ae:	40 83       	st	Z, r20
    *(state+11) = *(state+7);
 6b0:	9c 01       	movw	r18, r24
 6b2:	25 5f       	subi	r18, 0xF5	; 245
 6b4:	3f 4f       	sbci	r19, 0xFF	; 255
 6b6:	fc 01       	movw	r30, r24
 6b8:	47 81       	ldd	r20, Z+7	; 0x07
 6ba:	f9 01       	movw	r30, r18
 6bc:	40 83       	st	Z, r20
    *(state+7)  = *(state+3);
 6be:	9c 01       	movw	r18, r24
 6c0:	29 5f       	subi	r18, 0xF9	; 249
 6c2:	3f 4f       	sbci	r19, 0xFF	; 255
 6c4:	fc 01       	movw	r30, r24
 6c6:	43 81       	ldd	r20, Z+3	; 0x03
 6c8:	f9 01       	movw	r30, r18
 6ca:	40 83       	st	Z, r20
    *(state+3)  = temp;
 6cc:	03 96       	adiw	r24, 0x03	; 3
 6ce:	fc 01       	movw	r30, r24
 6d0:	10 83       	st	Z, r17
}
 6d2:	00 00       	nop
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	1f 91       	pop	r17
 6da:	08 95       	ret

000006dc <aes_encrypt_128>:

void aes_encrypt_128(register uint8_t *roundkeys,  register uint8_t const *plaintext,  register uint8_t *ciphertext) {
 6dc:	9f 92       	push	r9
 6de:	af 92       	push	r10
 6e0:	bf 92       	push	r11
 6e2:	cf 92       	push	r12
 6e4:	df 92       	push	r13
 6e6:	ef 92       	push	r14
 6e8:	ff 92       	push	r15
 6ea:	0f 93       	push	r16
 6ec:	1f 93       	push	r17
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
 6f2:	cd b7       	in	r28, 0x3d	; 61
 6f4:	de b7       	in	r29, 0x3e	; 62
 6f6:	60 97       	sbiw	r28, 0x10	; 16
 6f8:	0f b6       	in	r0, 0x3f	; 63
 6fa:	f8 94       	cli
 6fc:	de bf       	out	0x3e, r29	; 62
 6fe:	0f be       	out	0x3f, r0	; 63
 700:	cd bf       	out	0x3d, r28	; 61
 702:	6c 01       	movw	r12, r24
 704:	7a 01       	movw	r14, r20

    uint8_t tmp[16];
    register uint8_t i, j, t;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 706:	10 e0       	ldi	r17, 0x00	; 0
 708:	16 c0       	rjmp	.+44     	; 0x736 <aes_encrypt_128+0x5a>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
 70a:	81 2f       	mov	r24, r17
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	97 01       	movw	r18, r14
 710:	28 0f       	add	r18, r24
 712:	39 1f       	adc	r19, r25
 714:	81 2f       	mov	r24, r17
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	86 0f       	add	r24, r22
 71a:	97 1f       	adc	r25, r23
 71c:	fc 01       	movw	r30, r24
 71e:	40 81       	ld	r20, Z
 720:	c6 01       	movw	r24, r12
 722:	6c 01       	movw	r12, r24
 724:	ff ef       	ldi	r31, 0xFF	; 255
 726:	cf 1a       	sub	r12, r31
 728:	df 0a       	sbc	r13, r31
 72a:	fc 01       	movw	r30, r24
 72c:	80 81       	ld	r24, Z
 72e:	84 27       	eor	r24, r20
 730:	f9 01       	movw	r30, r18
 732:	80 83       	st	Z, r24

    uint8_t tmp[16];
    register uint8_t i, j, t;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 734:	1f 5f       	subi	r17, 0xFF	; 255
 736:	10 31       	cpi	r17, 0x10	; 16
 738:	40 f3       	brcs	.-48     	; 0x70a <aes_encrypt_128+0x2e>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
	j=AES_ROUNDS;
 73a:	0f 2e       	mov	r0, r31
 73c:	fa e0       	ldi	r31, 0x0A	; 10
 73e:	9f 2e       	mov	r9, r31
 740:	f0 2d       	mov	r31, r0
    while(--j){
 742:	14 c1       	rjmp	.+552    	; 0x96c <__stack+0x6d>
        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 744:	10 e0       	ldi	r17, 0x00	; 0
 746:	16 c0       	rjmp	.+44     	; 0x774 <aes_encrypt_128+0x98>
            *(tmp+i) = SBOX[*(ciphertext+i)];
 748:	81 2f       	mov	r24, r17
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	9e 01       	movw	r18, r28
 74e:	2f 5f       	subi	r18, 0xFF	; 255
 750:	3f 4f       	sbci	r19, 0xFF	; 255
 752:	82 0f       	add	r24, r18
 754:	93 1f       	adc	r25, r19
 756:	21 2f       	mov	r18, r17
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	2e 0d       	add	r18, r14
 75c:	3f 1d       	adc	r19, r15
 75e:	f9 01       	movw	r30, r18
 760:	20 81       	ld	r18, Z
 762:	22 2f       	mov	r18, r18
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	20 50       	subi	r18, 0x00	; 0
 768:	3e 4f       	sbci	r19, 0xFE	; 254
 76a:	f9 01       	movw	r30, r18
 76c:	20 81       	ld	r18, Z
 76e:	fc 01       	movw	r30, r24
 770:	20 83       	st	Z, r18

    // 9 rounds
	j=AES_ROUNDS;
    while(--j){
        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 772:	1f 5f       	subi	r17, 0xFF	; 255
 774:	10 31       	cpi	r17, 0x10	; 16
 776:	40 f3       	brcs	.-48     	; 0x748 <aes_encrypt_128+0x6c>
            *(tmp+i) = SBOX[*(ciphertext+i)];
        }
        shift_rows(tmp);
 778:	ce 01       	movw	r24, r28
 77a:	01 96       	adiw	r24, 0x01	; 1
 77c:	0e 94 12 03 	call	0x624	; 0x624 <shift_rows>
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4){  
 780:	10 e0       	ldi	r17, 0x00	; 0
 782:	d8 c0       	rjmp	.+432    	; 0x934 <__stack+0x35>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
 784:	81 2f       	mov	r24, r17
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	9e 01       	movw	r18, r28
 78a:	2f 5f       	subi	r18, 0xFF	; 255
 78c:	3f 4f       	sbci	r19, 0xFF	; 255
 78e:	82 0f       	add	r24, r18
 790:	93 1f       	adc	r25, r19
 792:	fc 01       	movw	r30, r24
 794:	40 81       	ld	r20, Z
 796:	81 2f       	mov	r24, r17
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	01 96       	adiw	r24, 0x01	; 1
 79c:	9e 01       	movw	r18, r28
 79e:	2f 5f       	subi	r18, 0xFF	; 255
 7a0:	3f 4f       	sbci	r19, 0xFF	; 255
 7a2:	82 0f       	add	r24, r18
 7a4:	93 1f       	adc	r25, r19
 7a6:	fc 01       	movw	r30, r24
 7a8:	80 81       	ld	r24, Z
 7aa:	48 27       	eor	r20, r24
 7ac:	81 2f       	mov	r24, r17
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	02 96       	adiw	r24, 0x02	; 2
 7b2:	9e 01       	movw	r18, r28
 7b4:	2f 5f       	subi	r18, 0xFF	; 255
 7b6:	3f 4f       	sbci	r19, 0xFF	; 255
 7b8:	82 0f       	add	r24, r18
 7ba:	93 1f       	adc	r25, r19
 7bc:	fc 01       	movw	r30, r24
 7be:	80 81       	ld	r24, Z
 7c0:	48 27       	eor	r20, r24
 7c2:	81 2f       	mov	r24, r17
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	03 96       	adiw	r24, 0x03	; 3
 7c8:	9e 01       	movw	r18, r28
 7ca:	2f 5f       	subi	r18, 0xFF	; 255
 7cc:	3f 4f       	sbci	r19, 0xFF	; 255
 7ce:	82 0f       	add	r24, r18
 7d0:	93 1f       	adc	r25, r19
 7d2:	fc 01       	movw	r30, r24
 7d4:	80 81       	ld	r24, Z
 7d6:	04 2f       	mov	r16, r20
 7d8:	08 27       	eor	r16, r24
            ciphertext[i]   = mul2(tmp[i]   ^ tmp[i+1]) ^ tmp[i]   ^ t;
 7da:	81 2f       	mov	r24, r17
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	57 01       	movw	r10, r14
 7e0:	a8 0e       	add	r10, r24
 7e2:	b9 1e       	adc	r11, r25
 7e4:	81 2f       	mov	r24, r17
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	9e 01       	movw	r18, r28
 7ea:	2f 5f       	subi	r18, 0xFF	; 255
 7ec:	3f 4f       	sbci	r19, 0xFF	; 255
 7ee:	82 0f       	add	r24, r18
 7f0:	93 1f       	adc	r25, r19
 7f2:	fc 01       	movw	r30, r24
 7f4:	40 81       	ld	r20, Z
 7f6:	81 2f       	mov	r24, r17
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	01 96       	adiw	r24, 0x01	; 1
 7fc:	9e 01       	movw	r18, r28
 7fe:	2f 5f       	subi	r18, 0xFF	; 255
 800:	3f 4f       	sbci	r19, 0xFF	; 255
 802:	82 0f       	add	r24, r18
 804:	93 1f       	adc	r25, r19
 806:	fc 01       	movw	r30, r24
 808:	80 81       	ld	r24, Z
 80a:	84 27       	eor	r24, r20
 80c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <mul2>
 810:	48 2f       	mov	r20, r24
 812:	81 2f       	mov	r24, r17
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	9e 01       	movw	r18, r28
 818:	2f 5f       	subi	r18, 0xFF	; 255
 81a:	3f 4f       	sbci	r19, 0xFF	; 255
 81c:	82 0f       	add	r24, r18
 81e:	93 1f       	adc	r25, r19
 820:	fc 01       	movw	r30, r24
 822:	80 81       	ld	r24, Z
 824:	84 27       	eor	r24, r20
 826:	80 27       	eor	r24, r16
 828:	f5 01       	movw	r30, r10
 82a:	80 83       	st	Z, r24
            ciphertext[i+1] = mul2(tmp[i+1] ^ tmp[i+2]) ^ tmp[i+1] ^ t;
 82c:	81 2f       	mov	r24, r17
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	01 96       	adiw	r24, 0x01	; 1
 832:	57 01       	movw	r10, r14
 834:	a8 0e       	add	r10, r24
 836:	b9 1e       	adc	r11, r25
 838:	81 2f       	mov	r24, r17
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	01 96       	adiw	r24, 0x01	; 1
 83e:	9e 01       	movw	r18, r28
 840:	2f 5f       	subi	r18, 0xFF	; 255
 842:	3f 4f       	sbci	r19, 0xFF	; 255
 844:	82 0f       	add	r24, r18
 846:	93 1f       	adc	r25, r19
 848:	fc 01       	movw	r30, r24
 84a:	40 81       	ld	r20, Z
 84c:	81 2f       	mov	r24, r17
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	02 96       	adiw	r24, 0x02	; 2
 852:	9e 01       	movw	r18, r28
 854:	2f 5f       	subi	r18, 0xFF	; 255
 856:	3f 4f       	sbci	r19, 0xFF	; 255
 858:	82 0f       	add	r24, r18
 85a:	93 1f       	adc	r25, r19
 85c:	fc 01       	movw	r30, r24
 85e:	80 81       	ld	r24, Z
 860:	84 27       	eor	r24, r20
 862:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <mul2>
 866:	48 2f       	mov	r20, r24
 868:	81 2f       	mov	r24, r17
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	01 96       	adiw	r24, 0x01	; 1
 86e:	9e 01       	movw	r18, r28
 870:	2f 5f       	subi	r18, 0xFF	; 255
 872:	3f 4f       	sbci	r19, 0xFF	; 255
 874:	82 0f       	add	r24, r18
 876:	93 1f       	adc	r25, r19
 878:	fc 01       	movw	r30, r24
 87a:	80 81       	ld	r24, Z
 87c:	84 27       	eor	r24, r20
 87e:	80 27       	eor	r24, r16
 880:	f5 01       	movw	r30, r10
 882:	80 83       	st	Z, r24
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
 884:	81 2f       	mov	r24, r17
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	02 96       	adiw	r24, 0x02	; 2
 88a:	57 01       	movw	r10, r14
 88c:	a8 0e       	add	r10, r24
 88e:	b9 1e       	adc	r11, r25
 890:	81 2f       	mov	r24, r17
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	02 96       	adiw	r24, 0x02	; 2
 896:	9e 01       	movw	r18, r28
 898:	2f 5f       	subi	r18, 0xFF	; 255
 89a:	3f 4f       	sbci	r19, 0xFF	; 255
 89c:	82 0f       	add	r24, r18
 89e:	93 1f       	adc	r25, r19
 8a0:	fc 01       	movw	r30, r24
 8a2:	40 81       	ld	r20, Z
 8a4:	81 2f       	mov	r24, r17
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	03 96       	adiw	r24, 0x03	; 3
 8aa:	9e 01       	movw	r18, r28
 8ac:	2f 5f       	subi	r18, 0xFF	; 255
 8ae:	3f 4f       	sbci	r19, 0xFF	; 255
 8b0:	82 0f       	add	r24, r18
 8b2:	93 1f       	adc	r25, r19
 8b4:	fc 01       	movw	r30, r24
 8b6:	80 81       	ld	r24, Z
 8b8:	84 27       	eor	r24, r20
 8ba:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <mul2>
 8be:	48 2f       	mov	r20, r24
 8c0:	81 2f       	mov	r24, r17
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	02 96       	adiw	r24, 0x02	; 2
 8c6:	9e 01       	movw	r18, r28
 8c8:	2f 5f       	subi	r18, 0xFF	; 255
 8ca:	3f 4f       	sbci	r19, 0xFF	; 255
 8cc:	82 0f       	add	r24, r18
 8ce:	93 1f       	adc	r25, r19
 8d0:	fc 01       	movw	r30, r24
 8d2:	80 81       	ld	r24, Z
 8d4:	84 27       	eor	r24, r20
 8d6:	80 27       	eor	r24, r16
 8d8:	f5 01       	movw	r30, r10
 8da:	80 83       	st	Z, r24
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
 8dc:	81 2f       	mov	r24, r17
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	03 96       	adiw	r24, 0x03	; 3
 8e2:	57 01       	movw	r10, r14
 8e4:	a8 0e       	add	r10, r24
 8e6:	b9 1e       	adc	r11, r25
 8e8:	81 2f       	mov	r24, r17
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	03 96       	adiw	r24, 0x03	; 3
 8ee:	9e 01       	movw	r18, r28
 8f0:	2f 5f       	subi	r18, 0xFF	; 255
 8f2:	3f 4f       	sbci	r19, 0xFF	; 255
 8f4:	82 0f       	add	r24, r18
 8f6:	93 1f       	adc	r25, r19
 8f8:	fc 01       	movw	r30, r24
 8fa:	40 81       	ld	r20, Z
 8fc:	81 2f       	mov	r24, r17
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	9e 01       	movw	r18, r28
 902:	2f 5f       	subi	r18, 0xFF	; 255
 904:	3f 4f       	sbci	r19, 0xFF	; 255
 906:	82 0f       	add	r24, r18
 908:	93 1f       	adc	r25, r19
 90a:	fc 01       	movw	r30, r24
 90c:	80 81       	ld	r24, Z
 90e:	84 27       	eor	r24, r20
 910:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <mul2>
 914:	48 2f       	mov	r20, r24
 916:	81 2f       	mov	r24, r17
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	03 96       	adiw	r24, 0x03	; 3
 91c:	9e 01       	movw	r18, r28
 91e:	2f 5f       	subi	r18, 0xFF	; 255
 920:	3f 4f       	sbci	r19, 0xFF	; 255
 922:	82 0f       	add	r24, r18
 924:	93 1f       	adc	r25, r19
 926:	fc 01       	movw	r30, r24
 928:	80 81       	ld	r24, Z
 92a:	84 27       	eor	r24, r20
 92c:	80 27       	eor	r24, r16
 92e:	f5 01       	movw	r30, r10
 930:	80 83       	st	Z, r24
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4){  
 932:	1c 5f       	subi	r17, 0xFC	; 252
 934:	10 31       	cpi	r17, 0x10	; 16
 936:	08 f4       	brcc	.+2      	; 0x93a <__stack+0x3b>
 938:	25 cf       	rjmp	.-438    	; 0x784 <aes_encrypt_128+0xa8>
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 93a:	10 e0       	ldi	r17, 0x00	; 0
 93c:	15 c0       	rjmp	.+42     	; 0x968 <__stack+0x69>
            *(ciphertext+i) ^= *roundkeys++;
 93e:	c6 01       	movw	r24, r12
 940:	6c 01       	movw	r12, r24
 942:	ff ef       	ldi	r31, 0xFF	; 255
 944:	cf 1a       	sub	r12, r31
 946:	df 0a       	sbc	r13, r31
 948:	fc 01       	movw	r30, r24
 94a:	40 81       	ld	r20, Z
 94c:	81 2f       	mov	r24, r17
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	8e 0d       	add	r24, r14
 952:	9f 1d       	adc	r25, r15
 954:	21 2f       	mov	r18, r17
 956:	30 e0       	ldi	r19, 0x00	; 0
 958:	2e 0d       	add	r18, r14
 95a:	3f 1d       	adc	r19, r15
 95c:	f9 01       	movw	r30, r18
 95e:	20 81       	ld	r18, Z
 960:	24 27       	eor	r18, r20
 962:	fc 01       	movw	r30, r24
 964:	20 83       	st	Z, r18
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 966:	1f 5f       	subi	r17, 0xFF	; 255
 968:	10 31       	cpi	r17, 0x10	; 16
 96a:	48 f3       	brcs	.-46     	; 0x93e <__stack+0x3f>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }

    // 9 rounds
	j=AES_ROUNDS;
    while(--j){
 96c:	9a 94       	dec	r9
 96e:	99 20       	and	r9, r9
 970:	09 f0       	breq	.+2      	; 0x974 <__stack+0x75>
 972:	e8 ce       	rjmp	.-560    	; 0x744 <aes_encrypt_128+0x68>
        }

    }
    
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 974:	10 e0       	ldi	r17, 0x00	; 0
 976:	13 c0       	rjmp	.+38     	; 0x99e <__stack+0x9f>
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
 978:	81 2f       	mov	r24, r17
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	8e 0d       	add	r24, r14
 97e:	9f 1d       	adc	r25, r15
 980:	21 2f       	mov	r18, r17
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	2e 0d       	add	r18, r14
 986:	3f 1d       	adc	r19, r15
 988:	f9 01       	movw	r30, r18
 98a:	20 81       	ld	r18, Z
 98c:	22 2f       	mov	r18, r18
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	20 50       	subi	r18, 0x00	; 0
 992:	3e 4f       	sbci	r19, 0xFE	; 254
 994:	f9 01       	movw	r30, r18
 996:	20 81       	ld	r18, Z
 998:	fc 01       	movw	r30, r24
 99a:	20 83       	st	Z, r18
        }

    }
    
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
 99c:	1f 5f       	subi	r17, 0xFF	; 255
 99e:	10 31       	cpi	r17, 0x10	; 16
 9a0:	58 f3       	brcs	.-42     	; 0x978 <__stack+0x79>
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
    shift_rows(ciphertext);
 9a2:	c7 01       	movw	r24, r14
 9a4:	0e 94 12 03 	call	0x624	; 0x624 <shift_rows>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 9a8:	10 e0       	ldi	r17, 0x00	; 0
 9aa:	15 c0       	rjmp	.+42     	; 0x9d6 <__stack+0xd7>
        *(ciphertext+i) ^= *roundkeys++;
 9ac:	c6 01       	movw	r24, r12
 9ae:	6c 01       	movw	r12, r24
 9b0:	ff ef       	ldi	r31, 0xFF	; 255
 9b2:	cf 1a       	sub	r12, r31
 9b4:	df 0a       	sbc	r13, r31
 9b6:	fc 01       	movw	r30, r24
 9b8:	40 81       	ld	r20, Z
 9ba:	81 2f       	mov	r24, r17
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	8e 0d       	add	r24, r14
 9c0:	9f 1d       	adc	r25, r15
 9c2:	21 2f       	mov	r18, r17
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	2e 0d       	add	r18, r14
 9c8:	3f 1d       	adc	r19, r15
 9ca:	f9 01       	movw	r30, r18
 9cc:	20 81       	ld	r18, Z
 9ce:	24 27       	eor	r18, r20
 9d0:	fc 01       	movw	r30, r24
 9d2:	20 83       	st	Z, r18
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(ciphertext+i) = SBOX[*(ciphertext+i)];
    }
    shift_rows(ciphertext);
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
 9d4:	1f 5f       	subi	r17, 0xFF	; 255
 9d6:	10 31       	cpi	r17, 0x10	; 16
 9d8:	48 f3       	brcs	.-46     	; 0x9ac <__stack+0xad>
        *(ciphertext+i) ^= *roundkeys++;
    }

}
 9da:	00 00       	nop
 9dc:	60 96       	adiw	r28, 0x10	; 16
 9de:	0f b6       	in	r0, 0x3f	; 63
 9e0:	f8 94       	cli
 9e2:	de bf       	out	0x3e, r29	; 62
 9e4:	0f be       	out	0x3f, r0	; 63
 9e6:	cd bf       	out	0x3d, r28	; 61
 9e8:	df 91       	pop	r29
 9ea:	cf 91       	pop	r28
 9ec:	1f 91       	pop	r17
 9ee:	0f 91       	pop	r16
 9f0:	ff 90       	pop	r15
 9f2:	ef 90       	pop	r14
 9f4:	df 90       	pop	r13
 9f6:	cf 90       	pop	r12
 9f8:	bf 90       	pop	r11
 9fa:	af 90       	pop	r10
 9fc:	9f 90       	pop	r9
 9fe:	08 95       	ret

00000a00 <aes_key_schedule_128>:
#include "aes_encrypt.h"
/*
 * round constants
 */
//static uint8_t RC[10] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};
void aes_key_schedule_128(register uint8_t *roundkeys) {
 a00:	cf 92       	push	r12
 a02:	df 92       	push	r13
 a04:	ef 92       	push	r14
 a06:	ff 92       	push	r15
 a08:	0f 93       	push	r16
 a0a:	1f 93       	push	r17
 a0c:	cf 93       	push	r28
 a0e:	df 93       	push	r29
 a10:	00 d0       	rcall	.+0      	; 0xa12 <aes_key_schedule_128+0x12>
 a12:	00 d0       	rcall	.+0      	; 0xa14 <aes_key_schedule_128+0x14>
 a14:	cd b7       	in	r28, 0x3d	; 61
 a16:	de b7       	in	r29, 0x3e	; 62

    uint8_t temp[4];
    register uint8_t *last4bytes; // point to the last 4 bytes of one round
    register uint8_t *lastround;
    register uint8_t i , j;
	i=0;
 a18:	f1 2c       	mov	r15, r1
	while(i<16){
 a1a:	06 c0       	rjmp	.+12     	; 0xa28 <aes_key_schedule_128+0x28>
		*roundkeys++ = ++i;
 a1c:	9c 01       	movw	r18, r24
 a1e:	c9 01       	movw	r24, r18
 a20:	01 96       	adiw	r24, 0x01	; 1
 a22:	f3 94       	inc	r15
 a24:	f9 01       	movw	r30, r18
 a26:	f0 82       	st	Z, r15
    uint8_t temp[4];
    register uint8_t *last4bytes; // point to the last 4 bytes of one round
    register uint8_t *lastround;
    register uint8_t i , j;
	i=0;
	while(i<16){
 a28:	ff e0       	ldi	r31, 0x0F	; 15
 a2a:	ff 15       	cp	r31, r15
 a2c:	b8 f7       	brcc	.-18     	; 0xa1c <aes_key_schedule_128+0x1c>
		*roundkeys++ = ++i;
	}
    last4bytes = roundkeys-4;
 a2e:	8c 01       	movw	r16, r24
 a30:	04 50       	subi	r16, 0x04	; 4
 a32:	11 09       	sbc	r17, r1
    for (i = 0; i < AES_ROUNDS; ++i) {
 a34:	f1 2c       	mov	r15, r1
 a36:	91 c0       	rjmp	.+290    	; 0xb5a <aes_key_schedule_128+0x15a>
        // k0-k3 for next round
        temp[3] =  SBOX[*last4bytes++];
 a38:	98 01       	movw	r18, r16
 a3a:	89 01       	movw	r16, r18
 a3c:	0f 5f       	subi	r16, 0xFF	; 255
 a3e:	1f 4f       	sbci	r17, 0xFF	; 255
 a40:	f9 01       	movw	r30, r18
 a42:	20 81       	ld	r18, Z
 a44:	22 2f       	mov	r18, r18
 a46:	30 e0       	ldi	r19, 0x00	; 0
 a48:	20 50       	subi	r18, 0x00	; 0
 a4a:	3e 4f       	sbci	r19, 0xFE	; 254
 a4c:	f9 01       	movw	r30, r18
 a4e:	20 81       	ld	r18, Z
 a50:	2c 83       	std	Y+4, r18	; 0x04
        temp[0] =  SBOX[*last4bytes++];
 a52:	98 01       	movw	r18, r16
 a54:	89 01       	movw	r16, r18
 a56:	0f 5f       	subi	r16, 0xFF	; 255
 a58:	1f 4f       	sbci	r17, 0xFF	; 255
 a5a:	f9 01       	movw	r30, r18
 a5c:	20 81       	ld	r18, Z
 a5e:	22 2f       	mov	r18, r18
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	20 50       	subi	r18, 0x00	; 0
 a64:	3e 4f       	sbci	r19, 0xFE	; 254
 a66:	f9 01       	movw	r30, r18
 a68:	20 81       	ld	r18, Z
 a6a:	29 83       	std	Y+1, r18	; 0x01
        temp[1] =  SBOX[*last4bytes++];
 a6c:	98 01       	movw	r18, r16
 a6e:	89 01       	movw	r16, r18
 a70:	0f 5f       	subi	r16, 0xFF	; 255
 a72:	1f 4f       	sbci	r17, 0xFF	; 255
 a74:	f9 01       	movw	r30, r18
 a76:	20 81       	ld	r18, Z
 a78:	22 2f       	mov	r18, r18
 a7a:	30 e0       	ldi	r19, 0x00	; 0
 a7c:	20 50       	subi	r18, 0x00	; 0
 a7e:	3e 4f       	sbci	r19, 0xFE	; 254
 a80:	f9 01       	movw	r30, r18
 a82:	20 81       	ld	r18, Z
 a84:	2a 83       	std	Y+2, r18	; 0x02
        temp[2] =  SBOX[*last4bytes++];
 a86:	98 01       	movw	r18, r16
 a88:	89 01       	movw	r16, r18
 a8a:	0f 5f       	subi	r16, 0xFF	; 255
 a8c:	1f 4f       	sbci	r17, 0xFF	; 255
 a8e:	f9 01       	movw	r30, r18
 a90:	20 81       	ld	r18, Z
 a92:	22 2f       	mov	r18, r18
 a94:	30 e0       	ldi	r19, 0x00	; 0
 a96:	20 50       	subi	r18, 0x00	; 0
 a98:	3e 4f       	sbci	r19, 0xFE	; 254
 a9a:	f9 01       	movw	r30, r18
 a9c:	20 81       	ld	r18, Z
 a9e:	2b 83       	std	Y+3, r18	; 0x03
		if(i<8){
 aa0:	f7 e0       	ldi	r31, 0x07	; 7
 aa2:	ff 15       	cp	r31, r15
 aa4:	70 f0       	brcs	.+28     	; 0xac2 <aes_key_schedule_128+0xc2>
			temp[0] ^= 1<<i;
 aa6:	29 81       	ldd	r18, Y+1	; 0x01
 aa8:	62 2f       	mov	r22, r18
 aaa:	4f 2d       	mov	r20, r15
 aac:	50 e0       	ldi	r21, 0x00	; 0
 aae:	21 e0       	ldi	r18, 0x01	; 1
 ab0:	30 e0       	ldi	r19, 0x00	; 0
 ab2:	02 c0       	rjmp	.+4      	; 0xab8 <aes_key_schedule_128+0xb8>
 ab4:	22 0f       	add	r18, r18
 ab6:	33 1f       	adc	r19, r19
 ab8:	4a 95       	dec	r20
 aba:	e2 f7       	brpl	.-8      	; 0xab4 <aes_key_schedule_128+0xb4>
 abc:	26 27       	eor	r18, r22
 abe:	29 83       	std	Y+1, r18	; 0x01
 ac0:	0f c0       	rjmp	.+30     	; 0xae0 <aes_key_schedule_128+0xe0>
		}else if(i==8){
 ac2:	28 e0       	ldi	r18, 0x08	; 8
 ac4:	f2 16       	cp	r15, r18
 ac6:	29 f4       	brne	.+10     	; 0xad2 <aes_key_schedule_128+0xd2>
			temp[0] ^=0x1b ;
 ac8:	39 81       	ldd	r19, Y+1	; 0x01
 aca:	2b e1       	ldi	r18, 0x1B	; 27
 acc:	23 27       	eor	r18, r19
 ace:	29 83       	std	Y+1, r18	; 0x01
 ad0:	07 c0       	rjmp	.+14     	; 0xae0 <aes_key_schedule_128+0xe0>
		}else if(i==9){
 ad2:	79 e0       	ldi	r23, 0x09	; 9
 ad4:	f7 16       	cp	r15, r23
 ad6:	21 f4       	brne	.+8      	; 0xae0 <aes_key_schedule_128+0xe0>
			temp[0] ^=0x36;
 ad8:	39 81       	ldd	r19, Y+1	; 0x01
 ada:	26 e3       	ldi	r18, 0x36	; 54
 adc:	23 27       	eor	r18, r19
 ade:	29 83       	std	Y+1, r18	; 0x01
		}
        lastround = roundkeys-16;
 ae0:	6c 01       	movw	r12, r24
 ae2:	e0 e1       	ldi	r30, 0x10	; 16
 ae4:	ce 1a       	sub	r12, r30
 ae6:	d1 08       	sbc	r13, r1
		j=-1;
 ae8:	ee 24       	eor	r14, r14
 aea:	ea 94       	dec	r14
		while(++j<4){
 aec:	16 c0       	rjmp	.+44     	; 0xb1a <aes_key_schedule_128+0x11a>
			*roundkeys++ = temp[j] ^ *lastround++;
 aee:	9c 01       	movw	r18, r24
 af0:	c9 01       	movw	r24, r18
 af2:	01 96       	adiw	r24, 0x01	; 1
 af4:	4e 2d       	mov	r20, r14
 af6:	50 e0       	ldi	r21, 0x00	; 0
 af8:	be 01       	movw	r22, r28
 afa:	6f 5f       	subi	r22, 0xFF	; 255
 afc:	7f 4f       	sbci	r23, 0xFF	; 255
 afe:	46 0f       	add	r20, r22
 b00:	57 1f       	adc	r21, r23
 b02:	fa 01       	movw	r30, r20
 b04:	60 81       	ld	r22, Z
 b06:	a6 01       	movw	r20, r12
 b08:	6a 01       	movw	r12, r20
 b0a:	ff ef       	ldi	r31, 0xFF	; 255
 b0c:	cf 1a       	sub	r12, r31
 b0e:	df 0a       	sbc	r13, r31
 b10:	fa 01       	movw	r30, r20
 b12:	40 81       	ld	r20, Z
 b14:	46 27       	eor	r20, r22
 b16:	f9 01       	movw	r30, r18
 b18:	40 83       	st	Z, r20
		}else if(i==9){
			temp[0] ^=0x36;
		}
        lastround = roundkeys-16;
		j=-1;
		while(++j<4){
 b1a:	e3 94       	inc	r14
 b1c:	f3 e0       	ldi	r31, 0x03	; 3
 b1e:	fe 15       	cp	r31, r14
 b20:	30 f7       	brcc	.-52     	; 0xaee <aes_key_schedule_128+0xee>
			*roundkeys++ = temp[j] ^ *lastround++;
		}
        // k4-k7 for next round
		j=13;
 b22:	0f 2e       	mov	r0, r31
 b24:	fd e0       	ldi	r31, 0x0D	; 13
 b26:	ef 2e       	mov	r14, r31
 b28:	f0 2d       	mov	r31, r0
		while(--j)
 b2a:	13 c0       	rjmp	.+38     	; 0xb52 <aes_key_schedule_128+0x152>
		{        
			*roundkeys++ = *last4bytes++ ^ *lastround++;
 b2c:	9c 01       	movw	r18, r24
 b2e:	c9 01       	movw	r24, r18
 b30:	01 96       	adiw	r24, 0x01	; 1
 b32:	a8 01       	movw	r20, r16
 b34:	8a 01       	movw	r16, r20
 b36:	0f 5f       	subi	r16, 0xFF	; 255
 b38:	1f 4f       	sbci	r17, 0xFF	; 255
 b3a:	fa 01       	movw	r30, r20
 b3c:	60 81       	ld	r22, Z
 b3e:	a6 01       	movw	r20, r12
 b40:	6a 01       	movw	r12, r20
 b42:	ff ef       	ldi	r31, 0xFF	; 255
 b44:	cf 1a       	sub	r12, r31
 b46:	df 0a       	sbc	r13, r31
 b48:	fa 01       	movw	r30, r20
 b4a:	40 81       	ld	r20, Z
 b4c:	46 27       	eor	r20, r22
 b4e:	f9 01       	movw	r30, r18
 b50:	40 83       	st	Z, r20
		while(++j<4){
			*roundkeys++ = temp[j] ^ *lastround++;
		}
        // k4-k7 for next round
		j=13;
		while(--j)
 b52:	ea 94       	dec	r14
 b54:	ee 20       	and	r14, r14
 b56:	51 f7       	brne	.-44     	; 0xb2c <aes_key_schedule_128+0x12c>
	i=0;
	while(i<16){
		*roundkeys++ = ++i;
	}
    last4bytes = roundkeys-4;
    for (i = 0; i < AES_ROUNDS; ++i) {
 b58:	f3 94       	inc	r15
 b5a:	f9 e0       	ldi	r31, 0x09	; 9
 b5c:	ff 15       	cp	r31, r15
 b5e:	08 f0       	brcs	.+2      	; 0xb62 <aes_key_schedule_128+0x162>
 b60:	6b cf       	rjmp	.-298    	; 0xa38 <aes_key_schedule_128+0x38>
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
  */
    }
}
 b62:	00 00       	nop
 b64:	0f 90       	pop	r0
 b66:	0f 90       	pop	r0
 b68:	0f 90       	pop	r0
 b6a:	0f 90       	pop	r0
 b6c:	df 91       	pop	r29
 b6e:	cf 91       	pop	r28
 b70:	1f 91       	pop	r17
 b72:	0f 91       	pop	r16
 b74:	ff 90       	pop	r15
 b76:	ef 90       	pop	r14
 b78:	df 90       	pop	r13
 b7a:	cf 90       	pop	r12
 b7c:	08 95       	ret

00000b7e <main>:
	//0x69, 0x34, 0xab, 0x43, 0x64, 0x14, 0x8f, 0xb9,
	0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30,
	0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a,
};

int main(int argc, char *argv[]) {
 b7e:	cf 93       	push	r28
 b80:	df 93       	push	r29
 b82:	cd b7       	in	r28, 0x3d	; 61
 b84:	de b7       	in	r29, 0x3e	; 62
 b86:	c5 5c       	subi	r28, 0xC5	; 197
 b88:	d1 09       	sbc	r29, r1
 b8a:	0f b6       	in	r0, 0x3f	; 63
 b8c:	f8 94       	cli
 b8e:	de bf       	out	0x3e, r29	; 62
 b90:	0f be       	out	0x3f, r0	; 63
 b92:	cd bf       	out	0x3d, r28	; 61
 b94:	9e 01       	movw	r18, r28
 b96:	2e 53       	subi	r18, 0x3E	; 62
 b98:	3f 4f       	sbci	r19, 0xFF	; 255
 b9a:	f9 01       	movw	r30, r18
 b9c:	91 83       	std	Z+1, r25	; 0x01
 b9e:	80 83       	st	Z, r24
 ba0:	ce 01       	movw	r24, r28
 ba2:	8c 53       	subi	r24, 0x3C	; 60
 ba4:	9f 4f       	sbci	r25, 0xFF	; 255
 ba6:	fc 01       	movw	r30, r24
 ba8:	71 83       	std	Z+1, r23	; 0x01
 baa:	60 83       	st	Z, r22

	
	uint8_t roundkeys[AES_ROUND_KEY_SIZE];

	// key schedule
	aes_key_schedule_128(roundkeys);
 bac:	ce 01       	movw	r24, r28
 bae:	42 96       	adiw	r24, 0x12	; 18
 bb0:	0e 94 00 05 	call	0xa00	; 0xa00 <aes_key_schedule_128>

	// encryption
	aes_encrypt_128(roundkeys, plaintext, ciphertext);
 bb4:	9e 01       	movw	r18, r28
 bb6:	2e 5f       	subi	r18, 0xFE	; 254
 bb8:	3f 4f       	sbci	r19, 0xFF	; 255
 bba:	ce 01       	movw	r24, r28
 bbc:	42 96       	adiw	r24, 0x12	; 18
 bbe:	a9 01       	movw	r20, r18
 bc0:	60 e0       	ldi	r22, 0x00	; 0
 bc2:	73 e0       	ldi	r23, 0x03	; 3
 bc4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <aes_encrypt_128>

	for (i = 0; i < AES_BLOCK_SIZE; i++) {
 bc8:	19 82       	std	Y+1, r1	; 0x01
 bca:	16 c0       	rjmp	.+44     	; 0xbf8 <main+0x7a>
		if ( ciphertext[i] != const_cipher[i] ) { break; }
 bcc:	89 81       	ldd	r24, Y+1	; 0x01
 bce:	88 2f       	mov	r24, r24
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	9e 01       	movw	r18, r28
 bd4:	2e 5f       	subi	r18, 0xFE	; 254
 bd6:	3f 4f       	sbci	r19, 0xFF	; 255
 bd8:	82 0f       	add	r24, r18
 bda:	93 1f       	adc	r25, r19
 bdc:	fc 01       	movw	r30, r24
 bde:	20 81       	ld	r18, Z
 be0:	89 81       	ldd	r24, Y+1	; 0x01
 be2:	88 2f       	mov	r24, r24
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	80 5f       	subi	r24, 0xF0	; 240
 be8:	9c 4f       	sbci	r25, 0xFC	; 252
 bea:	fc 01       	movw	r30, r24
 bec:	80 81       	ld	r24, Z
 bee:	28 17       	cp	r18, r24
 bf0:	39 f4       	brne	.+14     	; 0xc00 <main+0x82>
	aes_key_schedule_128(roundkeys);

	// encryption
	aes_encrypt_128(roundkeys, plaintext, ciphertext);

	for (i = 0; i < AES_BLOCK_SIZE; i++) {
 bf2:	89 81       	ldd	r24, Y+1	; 0x01
 bf4:	8f 5f       	subi	r24, 0xFF	; 255
 bf6:	89 83       	std	Y+1, r24	; 0x01
 bf8:	89 81       	ldd	r24, Y+1	; 0x01
 bfa:	80 31       	cpi	r24, 0x10	; 16
 bfc:	38 f3       	brcs	.-50     	; 0xbcc <main+0x4e>
 bfe:	01 c0       	rjmp	.+2      	; 0xc02 <main+0x84>
		if ( ciphertext[i] != const_cipher[i] ) { break; }
 c00:	00 00       	nop
	}


	// decryption
	aes_decrypt_128(roundkeys, ciphertext, ciphertext);
 c02:	ae 01       	movw	r20, r28
 c04:	4e 5f       	subi	r20, 0xFE	; 254
 c06:	5f 4f       	sbci	r21, 0xFF	; 255
 c08:	9e 01       	movw	r18, r28
 c0a:	2e 5f       	subi	r18, 0xFE	; 254
 c0c:	3f 4f       	sbci	r19, 0xFF	; 255
 c0e:	ce 01       	movw	r24, r28
 c10:	42 96       	adiw	r24, 0x12	; 18
 c12:	b9 01       	movw	r22, r18
 c14:	0e 94 e6 00 	call	0x1cc	; 0x1cc <aes_decrypt_128>
	for (i = 0; i < AES_BLOCK_SIZE; i++) {
 c18:	19 82       	std	Y+1, r1	; 0x01
 c1a:	16 c0       	rjmp	.+44     	; 0xc48 <main+0xca>
		if ( ciphertext[i] != plaintext[i] ) { break; }
 c1c:	89 81       	ldd	r24, Y+1	; 0x01
 c1e:	88 2f       	mov	r24, r24
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	9e 01       	movw	r18, r28
 c24:	2e 5f       	subi	r18, 0xFE	; 254
 c26:	3f 4f       	sbci	r19, 0xFF	; 255
 c28:	82 0f       	add	r24, r18
 c2a:	93 1f       	adc	r25, r19
 c2c:	fc 01       	movw	r30, r24
 c2e:	20 81       	ld	r18, Z
 c30:	89 81       	ldd	r24, Y+1	; 0x01
 c32:	88 2f       	mov	r24, r24
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	80 50       	subi	r24, 0x00	; 0
 c38:	9d 4f       	sbci	r25, 0xFD	; 253
 c3a:	fc 01       	movw	r30, r24
 c3c:	80 81       	ld	r24, Z
 c3e:	28 17       	cp	r18, r24
 c40:	39 f4       	brne	.+14     	; 0xc50 <main+0xd2>
	}


	// decryption
	aes_decrypt_128(roundkeys, ciphertext, ciphertext);
	for (i = 0; i < AES_BLOCK_SIZE; i++) {
 c42:	89 81       	ldd	r24, Y+1	; 0x01
 c44:	8f 5f       	subi	r24, 0xFF	; 255
 c46:	89 83       	std	Y+1, r24	; 0x01
 c48:	89 81       	ldd	r24, Y+1	; 0x01
 c4a:	80 31       	cpi	r24, 0x10	; 16
 c4c:	38 f3       	brcs	.-50     	; 0xc1c <main+0x9e>
 c4e:	01 c0       	rjmp	.+2      	; 0xc52 <main+0xd4>
		if ( ciphertext[i] != plaintext[i] ) { break; }
 c50:	00 00       	nop
	}

	return 0;
 c52:	80 e0       	ldi	r24, 0x00	; 0
 c54:	90 e0       	ldi	r25, 0x00	; 0
}
 c56:	cb 53       	subi	r28, 0x3B	; 59
 c58:	df 4f       	sbci	r29, 0xFF	; 255
 c5a:	0f b6       	in	r0, 0x3f	; 63
 c5c:	f8 94       	cli
 c5e:	de bf       	out	0x3e, r29	; 62
 c60:	0f be       	out	0x3f, r0	; 63
 c62:	cd bf       	out	0x3d, r28	; 61
 c64:	df 91       	pop	r29
 c66:	cf 91       	pop	r28
 c68:	08 95       	ret

00000c6a <_exit>:
 c6a:	f8 94       	cli

00000c6c <__stop_program>:
 c6c:	ff cf       	rjmp	.-2      	; 0xc6c <__stop_program>

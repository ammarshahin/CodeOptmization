
RamSize.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d93  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000092a  00000000  00000000  000022cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000099e  00000000  00000000  00002bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00003594  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000459  00000000  00000000  00003704  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027e  00000000  00000000  00003b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003ddb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 44 01 	jmp	0x288	; 0x288 <__ctors_end>
       4:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
       8:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
       c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      10:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      14:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      18:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      1c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      20:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      24:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      28:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      2c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      30:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      34:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      38:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      3c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      40:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      44:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      48:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      4c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      50:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      54:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      58:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      5c:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      60:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>
      64:	0c 94 4e 01 	jmp	0x29c	; 0x29c <__bad_interrupt>

00000068 <INV_SBOX>:
      68:	52 09 6a d5 30 36 a5 38 bf 40 a3 9e 81 f3 d7 fb     R.j.06.8.@......
      78:	7c e3 39 82 9b 2f ff 87 34 8e 43 44 c4 de e9 cb     |.9../..4.CD....
      88:	54 7b 94 32 a6 c2 23 3d ee 4c 95 0b 42 fa c3 4e     T{.2..#=.L..B..N
      98:	08 2e a1 66 28 d9 24 b2 76 5b a2 49 6d 8b d1 25     ...f(.$.v[.Im..%
      a8:	72 f8 f6 64 86 68 98 16 d4 a4 5c cc 5d 65 b6 92     r..d.h....\.]e..
      b8:	6c 70 48 50 fd ed b9 da 5e 15 46 57 a7 8d 9d 84     lpHP....^.FW....
      c8:	90 d8 ab 00 8c bc d3 0a f7 e4 58 05 b8 b3 45 06     ..........X...E.
      d8:	d0 2c 1e 8f ca 3f 0f 02 c1 af bd 03 01 13 8a 6b     .,...?.........k
      e8:	3a 91 11 41 4f 67 dc ea 97 f2 cf ce f0 b4 e6 73     :..AOg.........s
      f8:	96 ac 74 22 e7 ad 35 85 e2 f9 37 e8 1c 75 df 6e     ..t"..5...7..u.n
     108:	47 f1 1a 71 1d 29 c5 89 6f b7 62 0e aa 18 be 1b     G..q.)..o.b.....
     118:	fc 56 3e 4b c6 d2 79 20 9a db c0 fe 78 cd 5a f4     .V>K..y ....x.Z.
     128:	1f dd a8 33 88 07 c7 31 b1 12 10 59 27 80 ec 5f     ...3...1...Y'.._
     138:	60 51 7f a9 19 b5 4a 0d 2d e5 7a 9f 93 c9 9c ef     `Q....J.-.z.....
     148:	a0 e0 3b 4d ae 2a f5 b0 c8 eb bb 3c 83 53 99 61     ..;M.*.....<.S.a
     158:	17 2b 04 7e ba 77 d6 26 e1 69 14 63 55 21 0c 7d     .+.~.w.&.i.cU!.}

00000168 <SBOX>:
     168:	63 7c 77 7b f2 6b 6f c5 30 01 67 2b fe d7 ab 76     c|w{.ko.0.g+...v
     178:	ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4 72 c0     ...}.YG.......r.
     188:	b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15     ...&6?..4...q.1.
     198:	04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75     ..#..........'.u
     1a8:	09 83 2c 1a 1b 6e 5a a0 52 3b d6 b3 29 e3 2f 84     ..,..nZ.R;..)./.
     1b8:	53 d1 00 ed 20 fc b1 5b 6a cb be 39 4a 4c 58 cf     S... ..[j..9JLX.
     1c8:	d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8     ....CM3.E...P<..
     1d8:	51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2     Q.@...8....!....
     1e8:	cd 0c 13 ec 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73     ...._.D...~=d].s
     1f8:	60 81 4f dc 22 2a 90 88 46 ee b8 14 de 5e 0b db     `.O."*..F....^..
     208:	e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79     .2:.I.$\...b...y
     218:	e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08     ..7m..N.lV..ez..
     228:	ba 78 25 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a     .x%.......t.K...
     238:	70 3e b5 66 48 03 f6 0e 61 35 57 b9 86 c1 1d 9e     p>.fH...a5W.....
     248:	e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28 df     ....i........U(.
     258:	8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16     ......BhA.-..T..

00000268 <const_cipher>:
     268:	69 c4 e0 d8 6a 7b 04 30 d8 cd b7 80 70 b4 c5 5a     i...j{.0....p..Z

00000278 <plaintext>:
     278:	00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff     .."3DUfw........

00000288 <__ctors_end>:
     288:	11 24       	eor	r1, r1
     28a:	1f be       	out	0x3f, r1	; 63
     28c:	cf ef       	ldi	r28, 0xFF	; 255
     28e:	d8 e0       	ldi	r29, 0x08	; 8
     290:	de bf       	out	0x3e, r29	; 62
     292:	cd bf       	out	0x3d, r28	; 61
     294:	0e 94 62 09 	call	0x12c4	; 0x12c4 <main>
     298:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <_exit>

0000029c <__bad_interrupt>:
     29c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a0 <mul2>:
 * Multiply two numbers in the GF(2^8) finite field defined
 * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
static inline uint8_t mul2(uint8_t a) {
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	1f 92       	push	r1
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	89 83       	std	Y+1, r24	; 0x01
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     2ac:	89 81       	ldd	r24, Y+1	; 0x01
     2ae:	88 23       	and	r24, r24
     2b0:	4c f4       	brge	.+18     	; 0x2c4 <mul2+0x24>
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	88 2f       	mov	r24, r24
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	98 2f       	mov	r25, r24
     2be:	8b e1       	ldi	r24, 0x1B	; 27
     2c0:	89 27       	eor	r24, r25
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <mul2+0x28>
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	88 0f       	add	r24, r24
}
     2c8:	0f 90       	pop	r0
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	08 95       	ret

000002d0 <inv_shift_rows>:
 *  Row0: s0  s4  s8  s12   >>> 0 byte
 *  Row1: s1  s5  s9  s13   >>> 1 byte
 *  Row2: s2  s6  s10 s14   >>> 2 bytes
 *  Row3: s3  s7  s11 s15   >>> 3 bytes
 */
static uint8_t inv_shift_rows(uint8_t *state) {
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	00 d0       	rcall	.+0      	; 0x2d6 <inv_shift_rows+0x6>
     2d6:	1f 92       	push	r1
     2d8:	cd b7       	in	r28, 0x3d	; 61
     2da:	de b7       	in	r29, 0x3e	; 62
     2dc:	9b 83       	std	Y+3, r25	; 0x03
     2de:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp;
    // row1
    temp        = *(state+13);
     2e0:	8a 81       	ldd	r24, Y+2	; 0x02
     2e2:	9b 81       	ldd	r25, Y+3	; 0x03
     2e4:	fc 01       	movw	r30, r24
     2e6:	85 85       	ldd	r24, Z+13	; 0x0d
     2e8:	89 83       	std	Y+1, r24	; 0x01
    *(state+13) = *(state+9);
     2ea:	8a 81       	ldd	r24, Y+2	; 0x02
     2ec:	9b 81       	ldd	r25, Y+3	; 0x03
     2ee:	0d 96       	adiw	r24, 0x0d	; 13
     2f0:	2a 81       	ldd	r18, Y+2	; 0x02
     2f2:	3b 81       	ldd	r19, Y+3	; 0x03
     2f4:	f9 01       	movw	r30, r18
     2f6:	21 85       	ldd	r18, Z+9	; 0x09
     2f8:	fc 01       	movw	r30, r24
     2fa:	20 83       	st	Z, r18
    *(state+9)  = *(state+5);
     2fc:	8a 81       	ldd	r24, Y+2	; 0x02
     2fe:	9b 81       	ldd	r25, Y+3	; 0x03
     300:	09 96       	adiw	r24, 0x09	; 9
     302:	2a 81       	ldd	r18, Y+2	; 0x02
     304:	3b 81       	ldd	r19, Y+3	; 0x03
     306:	f9 01       	movw	r30, r18
     308:	25 81       	ldd	r18, Z+5	; 0x05
     30a:	fc 01       	movw	r30, r24
     30c:	20 83       	st	Z, r18
    *(state+5)  = *(state+1);
     30e:	8a 81       	ldd	r24, Y+2	; 0x02
     310:	9b 81       	ldd	r25, Y+3	; 0x03
     312:	05 96       	adiw	r24, 0x05	; 5
     314:	2a 81       	ldd	r18, Y+2	; 0x02
     316:	3b 81       	ldd	r19, Y+3	; 0x03
     318:	f9 01       	movw	r30, r18
     31a:	21 81       	ldd	r18, Z+1	; 0x01
     31c:	fc 01       	movw	r30, r24
     31e:	20 83       	st	Z, r18
    *(state+1)  = temp;
     320:	8a 81       	ldd	r24, Y+2	; 0x02
     322:	9b 81       	ldd	r25, Y+3	; 0x03
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	29 81       	ldd	r18, Y+1	; 0x01
     328:	fc 01       	movw	r30, r24
     32a:	20 83       	st	Z, r18
    // row2
    temp        = *(state+14);
     32c:	8a 81       	ldd	r24, Y+2	; 0x02
     32e:	9b 81       	ldd	r25, Y+3	; 0x03
     330:	fc 01       	movw	r30, r24
     332:	86 85       	ldd	r24, Z+14	; 0x0e
     334:	89 83       	std	Y+1, r24	; 0x01
    *(state+14) = *(state+6);
     336:	8a 81       	ldd	r24, Y+2	; 0x02
     338:	9b 81       	ldd	r25, Y+3	; 0x03
     33a:	0e 96       	adiw	r24, 0x0e	; 14
     33c:	2a 81       	ldd	r18, Y+2	; 0x02
     33e:	3b 81       	ldd	r19, Y+3	; 0x03
     340:	f9 01       	movw	r30, r18
     342:	26 81       	ldd	r18, Z+6	; 0x06
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18
    *(state+6)  = temp;
     348:	8a 81       	ldd	r24, Y+2	; 0x02
     34a:	9b 81       	ldd	r25, Y+3	; 0x03
     34c:	06 96       	adiw	r24, 0x06	; 6
     34e:	29 81       	ldd	r18, Y+1	; 0x01
     350:	fc 01       	movw	r30, r24
     352:	20 83       	st	Z, r18
    temp        = *(state+10);
     354:	8a 81       	ldd	r24, Y+2	; 0x02
     356:	9b 81       	ldd	r25, Y+3	; 0x03
     358:	fc 01       	movw	r30, r24
     35a:	82 85       	ldd	r24, Z+10	; 0x0a
     35c:	89 83       	std	Y+1, r24	; 0x01
    *(state+10) = *(state+2);
     35e:	8a 81       	ldd	r24, Y+2	; 0x02
     360:	9b 81       	ldd	r25, Y+3	; 0x03
     362:	0a 96       	adiw	r24, 0x0a	; 10
     364:	2a 81       	ldd	r18, Y+2	; 0x02
     366:	3b 81       	ldd	r19, Y+3	; 0x03
     368:	f9 01       	movw	r30, r18
     36a:	22 81       	ldd	r18, Z+2	; 0x02
     36c:	fc 01       	movw	r30, r24
     36e:	20 83       	st	Z, r18
    *(state+2)  = temp;
     370:	8a 81       	ldd	r24, Y+2	; 0x02
     372:	9b 81       	ldd	r25, Y+3	; 0x03
     374:	02 96       	adiw	r24, 0x02	; 2
     376:	29 81       	ldd	r18, Y+1	; 0x01
     378:	fc 01       	movw	r30, r24
     37a:	20 83       	st	Z, r18
    // row3
    temp        = *(state+3);
     37c:	8a 81       	ldd	r24, Y+2	; 0x02
     37e:	9b 81       	ldd	r25, Y+3	; 0x03
     380:	fc 01       	movw	r30, r24
     382:	83 81       	ldd	r24, Z+3	; 0x03
     384:	89 83       	std	Y+1, r24	; 0x01
    *(state+3)  = *(state+7);
     386:	8a 81       	ldd	r24, Y+2	; 0x02
     388:	9b 81       	ldd	r25, Y+3	; 0x03
     38a:	03 96       	adiw	r24, 0x03	; 3
     38c:	2a 81       	ldd	r18, Y+2	; 0x02
     38e:	3b 81       	ldd	r19, Y+3	; 0x03
     390:	f9 01       	movw	r30, r18
     392:	27 81       	ldd	r18, Z+7	; 0x07
     394:	fc 01       	movw	r30, r24
     396:	20 83       	st	Z, r18
    *(state+7)  = *(state+11);
     398:	8a 81       	ldd	r24, Y+2	; 0x02
     39a:	9b 81       	ldd	r25, Y+3	; 0x03
     39c:	07 96       	adiw	r24, 0x07	; 7
     39e:	2a 81       	ldd	r18, Y+2	; 0x02
     3a0:	3b 81       	ldd	r19, Y+3	; 0x03
     3a2:	f9 01       	movw	r30, r18
     3a4:	23 85       	ldd	r18, Z+11	; 0x0b
     3a6:	fc 01       	movw	r30, r24
     3a8:	20 83       	st	Z, r18
    *(state+11) = *(state+15);
     3aa:	8a 81       	ldd	r24, Y+2	; 0x02
     3ac:	9b 81       	ldd	r25, Y+3	; 0x03
     3ae:	0b 96       	adiw	r24, 0x0b	; 11
     3b0:	2a 81       	ldd	r18, Y+2	; 0x02
     3b2:	3b 81       	ldd	r19, Y+3	; 0x03
     3b4:	f9 01       	movw	r30, r18
     3b6:	27 85       	ldd	r18, Z+15	; 0x0f
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18
    *(state+15) = temp;
     3bc:	8a 81       	ldd	r24, Y+2	; 0x02
     3be:	9b 81       	ldd	r25, Y+3	; 0x03
     3c0:	0f 96       	adiw	r24, 0x0f	; 15
     3c2:	29 81       	ldd	r18, Y+1	; 0x01
     3c4:	fc 01       	movw	r30, r24
     3c6:	20 83       	st	Z, r18
	return temp;
     3c8:	89 81       	ldd	r24, Y+1	; 0x01
}
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <aes_decrypt_128>:
void aes_decrypt_128(const uint8_t *roundkeys, const uint8_t *ciphertext, uint8_t *plaintext) {
     3d6:	ff 92       	push	r15
     3d8:	0f 93       	push	r16
     3da:	1f 93       	push	r17
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	a1 97       	sbiw	r28, 0x21	; 33
     3e6:	0f b6       	in	r0, 0x3f	; 63
     3e8:	f8 94       	cli
     3ea:	de bf       	out	0x3e, r29	; 62
     3ec:	0f be       	out	0x3f, r0	; 63
     3ee:	cd bf       	out	0x3d, r28	; 61
     3f0:	9d 8f       	std	Y+29, r25	; 0x1d
     3f2:	8c 8f       	std	Y+28, r24	; 0x1c
     3f4:	7f 8f       	std	Y+31, r23	; 0x1f
     3f6:	6e 8f       	std	Y+30, r22	; 0x1e
     3f8:	59 a3       	std	Y+33, r21	; 0x21
     3fa:	48 a3       	std	Y+32, r20	; 0x20

    uint8_t tmp[16];
    uint8_t t, u, v;
    uint8_t i, j;

    roundkeys += 160;
     3fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3fe:	9d 8d       	ldd	r25, Y+29	; 0x1d
     400:	80 56       	subi	r24, 0x60	; 96
     402:	9f 4f       	sbci	r25, 0xFF	; 255
     404:	9d 8f       	std	Y+29, r25	; 0x1d
     406:	8c 8f       	std	Y+28, r24	; 0x1c

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     408:	19 82       	std	Y+1, r1	; 0x01
     40a:	1f c0       	rjmp	.+62     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	88 2f       	mov	r24, r24
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	28 a1       	ldd	r18, Y+32	; 0x20
     414:	39 a1       	ldd	r19, Y+33	; 0x21
     416:	82 0f       	add	r24, r18
     418:	93 1f       	adc	r25, r19
     41a:	29 81       	ldd	r18, Y+1	; 0x01
     41c:	22 2f       	mov	r18, r18
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	4e 8d       	ldd	r20, Y+30	; 0x1e
     422:	5f 8d       	ldd	r21, Y+31	; 0x1f
     424:	24 0f       	add	r18, r20
     426:	35 1f       	adc	r19, r21
     428:	f9 01       	movw	r30, r18
     42a:	60 81       	ld	r22, Z
     42c:	29 81       	ldd	r18, Y+1	; 0x01
     42e:	22 2f       	mov	r18, r18
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	4c 8d       	ldd	r20, Y+28	; 0x1c
     434:	5d 8d       	ldd	r21, Y+29	; 0x1d
     436:	24 0f       	add	r18, r20
     438:	35 1f       	adc	r19, r21
     43a:	f9 01       	movw	r30, r18
     43c:	20 81       	ld	r18, Z
     43e:	26 27       	eor	r18, r22
     440:	fc 01       	movw	r30, r24
     442:	20 83       	st	Z, r18
    uint8_t i, j;

    roundkeys += 160;

    // first round
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	8f 5f       	subi	r24, 0xFF	; 255
     448:	89 83       	std	Y+1, r24	; 0x01
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	80 31       	cpi	r24, 0x10	; 16
     44e:	f0 f2       	brcs	.-68     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
     450:	8c 8d       	ldd	r24, Y+28	; 0x1c
     452:	9d 8d       	ldd	r25, Y+29	; 0x1d
     454:	40 97       	sbiw	r24, 0x10	; 16
     456:	9d 8f       	std	Y+29, r25	; 0x1d
     458:	8c 8f       	std	Y+28, r24	; 0x1c
    inv_shift_rows(plaintext);
     45a:	88 a1       	ldd	r24, Y+32	; 0x20
     45c:	99 a1       	ldd	r25, Y+33	; 0x21
     45e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <inv_shift_rows>
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     462:	19 82       	std	Y+1, r1	; 0x01
     464:	21 c0       	rjmp	.+66     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
        *(plaintext+i) =  pgm_read_byte(&INV_SBOX[*(plaintext+i)]);
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	88 2f       	mov	r24, r24
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	28 a1       	ldd	r18, Y+32	; 0x20
     46e:	39 a1       	ldd	r19, Y+33	; 0x21
     470:	82 0f       	add	r24, r18
     472:	93 1f       	adc	r25, r19
     474:	29 81       	ldd	r18, Y+1	; 0x01
     476:	22 2f       	mov	r18, r18
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	48 a1       	ldd	r20, Y+32	; 0x20
     47c:	59 a1       	ldd	r21, Y+33	; 0x21
     47e:	24 0f       	add	r18, r20
     480:	35 1f       	adc	r19, r21
     482:	f9 01       	movw	r30, r18
     484:	20 81       	ld	r18, Z
     486:	22 2f       	mov	r18, r18
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	28 59       	subi	r18, 0x98	; 152
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	3c 83       	std	Y+4, r19	; 0x04
     490:	2b 83       	std	Y+3, r18	; 0x03
     492:	2b 81       	ldd	r18, Y+3	; 0x03
     494:	3c 81       	ldd	r19, Y+4	; 0x04
     496:	f9 01       	movw	r30, r18
     498:	24 91       	lpm	r18, Z
     49a:	2d 83       	std	Y+5, r18	; 0x05
     49c:	2d 81       	ldd	r18, Y+5	; 0x05
     49e:	fc 01       	movw	r30, r24
     4a0:	20 83       	st	Z, r18
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(plaintext+i) = *(ciphertext+i) ^ *(roundkeys+i);
    }
    roundkeys -= 16;
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     4a2:	89 81       	ldd	r24, Y+1	; 0x01
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	89 83       	std	Y+1, r24	; 0x01
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	80 31       	cpi	r24, 0x10	; 16
     4ac:	e0 f2       	brcs	.-72     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
        *(plaintext+i) =  pgm_read_byte(&INV_SBOX[*(plaintext+i)]);
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	8a 83       	std	Y+2, r24	; 0x02
     4b2:	f5 c1       	rjmp	.+1002   	; 0x89e <__LOCK_REGION_LENGTH__+0x49e>
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     4b4:	19 82       	std	Y+1, r1	; 0x01
     4b6:	20 c0       	rjmp	.+64     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
            *(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	88 2f       	mov	r24, r24
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	9e 01       	movw	r18, r28
     4c0:	24 5f       	subi	r18, 0xF4	; 244
     4c2:	3f 4f       	sbci	r19, 0xFF	; 255
     4c4:	82 0f       	add	r24, r18
     4c6:	93 1f       	adc	r25, r19
     4c8:	29 81       	ldd	r18, Y+1	; 0x01
     4ca:	22 2f       	mov	r18, r18
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	48 a1       	ldd	r20, Y+32	; 0x20
     4d0:	59 a1       	ldd	r21, Y+33	; 0x21
     4d2:	24 0f       	add	r18, r20
     4d4:	35 1f       	adc	r19, r21
     4d6:	f9 01       	movw	r30, r18
     4d8:	60 81       	ld	r22, Z
     4da:	29 81       	ldd	r18, Y+1	; 0x01
     4dc:	22 2f       	mov	r18, r18
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	4c 8d       	ldd	r20, Y+28	; 0x1c
     4e2:	5d 8d       	ldd	r21, Y+29	; 0x1d
     4e4:	24 0f       	add	r18, r20
     4e6:	35 1f       	adc	r19, r21
     4e8:	f9 01       	movw	r30, r18
     4ea:	20 81       	ld	r18, Z
     4ec:	26 27       	eor	r18, r22
     4ee:	fc 01       	movw	r30, r24
     4f0:	20 83       	st	Z, r18
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
        
        // Inverse AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	8f 5f       	subi	r24, 0xFF	; 255
     4f6:	89 83       	std	Y+1, r24	; 0x01
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	80 31       	cpi	r24, 0x10	; 16
     4fc:	e8 f2       	brcs	.-70     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
     4fe:	19 82       	std	Y+1, r1	; 0x01
     500:	98 c1       	rjmp	.+816    	; 0x832 <__LOCK_REGION_LENGTH__+0x432>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	88 2f       	mov	r24, r24
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	9e 01       	movw	r18, r28
     50a:	24 5f       	subi	r18, 0xF4	; 244
     50c:	3f 4f       	sbci	r19, 0xFF	; 255
     50e:	82 0f       	add	r24, r18
     510:	93 1f       	adc	r25, r19
     512:	fc 01       	movw	r30, r24
     514:	40 81       	ld	r20, Z
     516:	89 81       	ldd	r24, Y+1	; 0x01
     518:	88 2f       	mov	r24, r24
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	9e 01       	movw	r18, r28
     520:	24 5f       	subi	r18, 0xF4	; 244
     522:	3f 4f       	sbci	r19, 0xFF	; 255
     524:	82 0f       	add	r24, r18
     526:	93 1f       	adc	r25, r19
     528:	fc 01       	movw	r30, r24
     52a:	80 81       	ld	r24, Z
     52c:	48 27       	eor	r20, r24
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	88 2f       	mov	r24, r24
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	02 96       	adiw	r24, 0x02	; 2
     536:	9e 01       	movw	r18, r28
     538:	24 5f       	subi	r18, 0xF4	; 244
     53a:	3f 4f       	sbci	r19, 0xFF	; 255
     53c:	82 0f       	add	r24, r18
     53e:	93 1f       	adc	r25, r19
     540:	fc 01       	movw	r30, r24
     542:	80 81       	ld	r24, Z
     544:	48 27       	eor	r20, r24
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	88 2f       	mov	r24, r24
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	03 96       	adiw	r24, 0x03	; 3
     54e:	9e 01       	movw	r18, r28
     550:	24 5f       	subi	r18, 0xF4	; 244
     552:	3f 4f       	sbci	r19, 0xFF	; 255
     554:	82 0f       	add	r24, r18
     556:	93 1f       	adc	r25, r19
     558:	fc 01       	movw	r30, r24
     55a:	80 81       	ld	r24, Z
     55c:	84 27       	eor	r24, r20
     55e:	8e 83       	std	Y+6, r24	; 0x06
            plaintext[i]   = t ^ tmp[i]   ^ mul2(tmp[i]   ^ tmp[i+1]);
     560:	89 81       	ldd	r24, Y+1	; 0x01
     562:	88 2f       	mov	r24, r24
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	28 a1       	ldd	r18, Y+32	; 0x20
     568:	39 a1       	ldd	r19, Y+33	; 0x21
     56a:	89 01       	movw	r16, r18
     56c:	08 0f       	add	r16, r24
     56e:	19 1f       	adc	r17, r25
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	88 2f       	mov	r24, r24
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	9e 01       	movw	r18, r28
     578:	24 5f       	subi	r18, 0xF4	; 244
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	82 0f       	add	r24, r18
     57e:	93 1f       	adc	r25, r19
     580:	fc 01       	movw	r30, r24
     582:	90 81       	ld	r25, Z
     584:	8e 81       	ldd	r24, Y+6	; 0x06
     586:	f9 2e       	mov	r15, r25
     588:	f8 26       	eor	r15, r24
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	88 2f       	mov	r24, r24
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	9e 01       	movw	r18, r28
     592:	24 5f       	subi	r18, 0xF4	; 244
     594:	3f 4f       	sbci	r19, 0xFF	; 255
     596:	82 0f       	add	r24, r18
     598:	93 1f       	adc	r25, r19
     59a:	fc 01       	movw	r30, r24
     59c:	40 81       	ld	r20, Z
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	88 2f       	mov	r24, r24
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	01 96       	adiw	r24, 0x01	; 1
     5a6:	9e 01       	movw	r18, r28
     5a8:	24 5f       	subi	r18, 0xF4	; 244
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	82 0f       	add	r24, r18
     5ae:	93 1f       	adc	r25, r19
     5b0:	fc 01       	movw	r30, r24
     5b2:	80 81       	ld	r24, Z
     5b4:	84 27       	eor	r24, r20
     5b6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     5ba:	8f 25       	eor	r24, r15
     5bc:	f8 01       	movw	r30, r16
     5be:	80 83       	st	Z, r24
            plaintext[i+1] = t ^ tmp[i+1] ^ mul2(tmp[i+1] ^ tmp[i+2]);
     5c0:	89 81       	ldd	r24, Y+1	; 0x01
     5c2:	88 2f       	mov	r24, r24
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	28 a1       	ldd	r18, Y+32	; 0x20
     5ca:	39 a1       	ldd	r19, Y+33	; 0x21
     5cc:	89 01       	movw	r16, r18
     5ce:	08 0f       	add	r16, r24
     5d0:	19 1f       	adc	r17, r25
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	88 2f       	mov	r24, r24
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	9e 01       	movw	r18, r28
     5dc:	24 5f       	subi	r18, 0xF4	; 244
     5de:	3f 4f       	sbci	r19, 0xFF	; 255
     5e0:	82 0f       	add	r24, r18
     5e2:	93 1f       	adc	r25, r19
     5e4:	fc 01       	movw	r30, r24
     5e6:	90 81       	ld	r25, Z
     5e8:	8e 81       	ldd	r24, Y+6	; 0x06
     5ea:	f9 2e       	mov	r15, r25
     5ec:	f8 26       	eor	r15, r24
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	88 2f       	mov	r24, r24
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	9e 01       	movw	r18, r28
     5f8:	24 5f       	subi	r18, 0xF4	; 244
     5fa:	3f 4f       	sbci	r19, 0xFF	; 255
     5fc:	82 0f       	add	r24, r18
     5fe:	93 1f       	adc	r25, r19
     600:	fc 01       	movw	r30, r24
     602:	40 81       	ld	r20, Z
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	88 2f       	mov	r24, r24
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	02 96       	adiw	r24, 0x02	; 2
     60c:	9e 01       	movw	r18, r28
     60e:	24 5f       	subi	r18, 0xF4	; 244
     610:	3f 4f       	sbci	r19, 0xFF	; 255
     612:	82 0f       	add	r24, r18
     614:	93 1f       	adc	r25, r19
     616:	fc 01       	movw	r30, r24
     618:	80 81       	ld	r24, Z
     61a:	84 27       	eor	r24, r20
     61c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     620:	8f 25       	eor	r24, r15
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
            plaintext[i+2] = t ^ tmp[i+2] ^ mul2(tmp[i+2] ^ tmp[i+3]);
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	88 2f       	mov	r24, r24
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	02 96       	adiw	r24, 0x02	; 2
     62e:	28 a1       	ldd	r18, Y+32	; 0x20
     630:	39 a1       	ldd	r19, Y+33	; 0x21
     632:	89 01       	movw	r16, r18
     634:	08 0f       	add	r16, r24
     636:	19 1f       	adc	r17, r25
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	88 2f       	mov	r24, r24
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	02 96       	adiw	r24, 0x02	; 2
     640:	9e 01       	movw	r18, r28
     642:	24 5f       	subi	r18, 0xF4	; 244
     644:	3f 4f       	sbci	r19, 0xFF	; 255
     646:	82 0f       	add	r24, r18
     648:	93 1f       	adc	r25, r19
     64a:	fc 01       	movw	r30, r24
     64c:	90 81       	ld	r25, Z
     64e:	8e 81       	ldd	r24, Y+6	; 0x06
     650:	f9 2e       	mov	r15, r25
     652:	f8 26       	eor	r15, r24
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	88 2f       	mov	r24, r24
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	02 96       	adiw	r24, 0x02	; 2
     65c:	9e 01       	movw	r18, r28
     65e:	24 5f       	subi	r18, 0xF4	; 244
     660:	3f 4f       	sbci	r19, 0xFF	; 255
     662:	82 0f       	add	r24, r18
     664:	93 1f       	adc	r25, r19
     666:	fc 01       	movw	r30, r24
     668:	40 81       	ld	r20, Z
     66a:	89 81       	ldd	r24, Y+1	; 0x01
     66c:	88 2f       	mov	r24, r24
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	03 96       	adiw	r24, 0x03	; 3
     672:	9e 01       	movw	r18, r28
     674:	24 5f       	subi	r18, 0xF4	; 244
     676:	3f 4f       	sbci	r19, 0xFF	; 255
     678:	82 0f       	add	r24, r18
     67a:	93 1f       	adc	r25, r19
     67c:	fc 01       	movw	r30, r24
     67e:	80 81       	ld	r24, Z
     680:	84 27       	eor	r24, r20
     682:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     686:	8f 25       	eor	r24, r15
     688:	f8 01       	movw	r30, r16
     68a:	80 83       	st	Z, r24
            plaintext[i+3] = t ^ tmp[i+3] ^ mul2(tmp[i+3] ^ tmp[i]);
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	88 2f       	mov	r24, r24
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	03 96       	adiw	r24, 0x03	; 3
     694:	28 a1       	ldd	r18, Y+32	; 0x20
     696:	39 a1       	ldd	r19, Y+33	; 0x21
     698:	89 01       	movw	r16, r18
     69a:	08 0f       	add	r16, r24
     69c:	19 1f       	adc	r17, r25
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	88 2f       	mov	r24, r24
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	03 96       	adiw	r24, 0x03	; 3
     6a6:	9e 01       	movw	r18, r28
     6a8:	24 5f       	subi	r18, 0xF4	; 244
     6aa:	3f 4f       	sbci	r19, 0xFF	; 255
     6ac:	82 0f       	add	r24, r18
     6ae:	93 1f       	adc	r25, r19
     6b0:	fc 01       	movw	r30, r24
     6b2:	90 81       	ld	r25, Z
     6b4:	8e 81       	ldd	r24, Y+6	; 0x06
     6b6:	f9 2e       	mov	r15, r25
     6b8:	f8 26       	eor	r15, r24
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	88 2f       	mov	r24, r24
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	03 96       	adiw	r24, 0x03	; 3
     6c2:	9e 01       	movw	r18, r28
     6c4:	24 5f       	subi	r18, 0xF4	; 244
     6c6:	3f 4f       	sbci	r19, 0xFF	; 255
     6c8:	82 0f       	add	r24, r18
     6ca:	93 1f       	adc	r25, r19
     6cc:	fc 01       	movw	r30, r24
     6ce:	40 81       	ld	r20, Z
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	88 2f       	mov	r24, r24
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	9e 01       	movw	r18, r28
     6d8:	24 5f       	subi	r18, 0xF4	; 244
     6da:	3f 4f       	sbci	r19, 0xFF	; 255
     6dc:	82 0f       	add	r24, r18
     6de:	93 1f       	adc	r25, r19
     6e0:	fc 01       	movw	r30, r24
     6e2:	80 81       	ld	r24, Z
     6e4:	84 27       	eor	r24, r20
     6e6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     6ea:	8f 25       	eor	r24, r15
     6ec:	f8 01       	movw	r30, r16
     6ee:	80 83       	st	Z, r24
            u = mul2(mul2(tmp[i]   ^ tmp[i+2]));
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	9e 01       	movw	r18, r28
     6f8:	24 5f       	subi	r18, 0xF4	; 244
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	82 0f       	add	r24, r18
     6fe:	93 1f       	adc	r25, r19
     700:	fc 01       	movw	r30, r24
     702:	40 81       	ld	r20, Z
     704:	89 81       	ldd	r24, Y+1	; 0x01
     706:	88 2f       	mov	r24, r24
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	02 96       	adiw	r24, 0x02	; 2
     70c:	9e 01       	movw	r18, r28
     70e:	24 5f       	subi	r18, 0xF4	; 244
     710:	3f 4f       	sbci	r19, 0xFF	; 255
     712:	82 0f       	add	r24, r18
     714:	93 1f       	adc	r25, r19
     716:	fc 01       	movw	r30, r24
     718:	80 81       	ld	r24, Z
     71a:	84 27       	eor	r24, r20
     71c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     720:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     724:	8f 83       	std	Y+7, r24	; 0x07
            v = mul2(mul2(tmp[i+1] ^ tmp[i+3]));
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	88 2f       	mov	r24, r24
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	9e 01       	movw	r18, r28
     730:	24 5f       	subi	r18, 0xF4	; 244
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	82 0f       	add	r24, r18
     736:	93 1f       	adc	r25, r19
     738:	fc 01       	movw	r30, r24
     73a:	40 81       	ld	r20, Z
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	03 96       	adiw	r24, 0x03	; 3
     744:	9e 01       	movw	r18, r28
     746:	24 5f       	subi	r18, 0xF4	; 244
     748:	3f 4f       	sbci	r19, 0xFF	; 255
     74a:	82 0f       	add	r24, r18
     74c:	93 1f       	adc	r25, r19
     74e:	fc 01       	movw	r30, r24
     750:	80 81       	ld	r24, Z
     752:	84 27       	eor	r24, r20
     754:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     758:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     75c:	88 87       	std	Y+8, r24	; 0x08
            t = mul2(u ^ v);
     75e:	9f 81       	ldd	r25, Y+7	; 0x07
     760:	88 85       	ldd	r24, Y+8	; 0x08
     762:	89 27       	eor	r24, r25
     764:	0e 94 50 01 	call	0x2a0	; 0x2a0 <mul2>
     768:	8e 83       	std	Y+6, r24	; 0x06
            plaintext[i]   ^= t ^ u;
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	88 2f       	mov	r24, r24
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	28 a1       	ldd	r18, Y+32	; 0x20
     772:	39 a1       	ldd	r19, Y+33	; 0x21
     774:	82 0f       	add	r24, r18
     776:	93 1f       	adc	r25, r19
     778:	29 81       	ldd	r18, Y+1	; 0x01
     77a:	22 2f       	mov	r18, r18
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	48 a1       	ldd	r20, Y+32	; 0x20
     780:	59 a1       	ldd	r21, Y+33	; 0x21
     782:	24 0f       	add	r18, r20
     784:	35 1f       	adc	r19, r21
     786:	f9 01       	movw	r30, r18
     788:	30 81       	ld	r19, Z
     78a:	4e 81       	ldd	r20, Y+6	; 0x06
     78c:	2f 81       	ldd	r18, Y+7	; 0x07
     78e:	24 27       	eor	r18, r20
     790:	23 27       	eor	r18, r19
     792:	fc 01       	movw	r30, r24
     794:	20 83       	st	Z, r18
            plaintext[i+1] ^= t ^ v;
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	88 2f       	mov	r24, r24
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	01 96       	adiw	r24, 0x01	; 1
     79e:	28 a1       	ldd	r18, Y+32	; 0x20
     7a0:	39 a1       	ldd	r19, Y+33	; 0x21
     7a2:	82 0f       	add	r24, r18
     7a4:	93 1f       	adc	r25, r19
     7a6:	29 81       	ldd	r18, Y+1	; 0x01
     7a8:	22 2f       	mov	r18, r18
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	2f 5f       	subi	r18, 0xFF	; 255
     7ae:	3f 4f       	sbci	r19, 0xFF	; 255
     7b0:	48 a1       	ldd	r20, Y+32	; 0x20
     7b2:	59 a1       	ldd	r21, Y+33	; 0x21
     7b4:	24 0f       	add	r18, r20
     7b6:	35 1f       	adc	r19, r21
     7b8:	f9 01       	movw	r30, r18
     7ba:	30 81       	ld	r19, Z
     7bc:	4e 81       	ldd	r20, Y+6	; 0x06
     7be:	28 85       	ldd	r18, Y+8	; 0x08
     7c0:	24 27       	eor	r18, r20
     7c2:	23 27       	eor	r18, r19
     7c4:	fc 01       	movw	r30, r24
     7c6:	20 83       	st	Z, r18
            plaintext[i+2] ^= t ^ u;
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	88 2f       	mov	r24, r24
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	02 96       	adiw	r24, 0x02	; 2
     7d0:	28 a1       	ldd	r18, Y+32	; 0x20
     7d2:	39 a1       	ldd	r19, Y+33	; 0x21
     7d4:	82 0f       	add	r24, r18
     7d6:	93 1f       	adc	r25, r19
     7d8:	29 81       	ldd	r18, Y+1	; 0x01
     7da:	22 2f       	mov	r18, r18
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	2e 5f       	subi	r18, 0xFE	; 254
     7e0:	3f 4f       	sbci	r19, 0xFF	; 255
     7e2:	48 a1       	ldd	r20, Y+32	; 0x20
     7e4:	59 a1       	ldd	r21, Y+33	; 0x21
     7e6:	24 0f       	add	r18, r20
     7e8:	35 1f       	adc	r19, r21
     7ea:	f9 01       	movw	r30, r18
     7ec:	30 81       	ld	r19, Z
     7ee:	4e 81       	ldd	r20, Y+6	; 0x06
     7f0:	2f 81       	ldd	r18, Y+7	; 0x07
     7f2:	24 27       	eor	r18, r20
     7f4:	23 27       	eor	r18, r19
     7f6:	fc 01       	movw	r30, r24
     7f8:	20 83       	st	Z, r18
            plaintext[i+3] ^= t ^ v;
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	88 2f       	mov	r24, r24
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	03 96       	adiw	r24, 0x03	; 3
     802:	28 a1       	ldd	r18, Y+32	; 0x20
     804:	39 a1       	ldd	r19, Y+33	; 0x21
     806:	82 0f       	add	r24, r18
     808:	93 1f       	adc	r25, r19
     80a:	29 81       	ldd	r18, Y+1	; 0x01
     80c:	22 2f       	mov	r18, r18
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	2d 5f       	subi	r18, 0xFD	; 253
     812:	3f 4f       	sbci	r19, 0xFF	; 255
     814:	48 a1       	ldd	r20, Y+32	; 0x20
     816:	59 a1       	ldd	r21, Y+33	; 0x21
     818:	24 0f       	add	r18, r20
     81a:	35 1f       	adc	r19, r21
     81c:	f9 01       	movw	r30, r18
     81e:	30 81       	ld	r19, Z
     820:	4e 81       	ldd	r20, Y+6	; 0x06
     822:	28 85       	ldd	r18, Y+8	; 0x08
     824:	24 27       	eor	r18, r20
     826:	23 27       	eor	r18, r19
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
     82c:	89 81       	ldd	r24, Y+1	; 0x01
     82e:	8c 5f       	subi	r24, 0xFC	; 252
     830:	89 83       	std	Y+1, r24	; 0x01
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	80 31       	cpi	r24, 0x10	; 16
     836:	08 f4       	brcc	.+2      	; 0x83a <__LOCK_REGION_LENGTH__+0x43a>
     838:	64 ce       	rjmp	.-824    	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
            plaintext[i+2] ^= t ^ u;
            plaintext[i+3] ^= t ^ v;
        }
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
     83a:	88 a1       	ldd	r24, Y+32	; 0x20
     83c:	99 a1       	ldd	r25, Y+33	; 0x21
     83e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <inv_shift_rows>
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     842:	19 82       	std	Y+1, r1	; 0x01
     844:	21 c0       	rjmp	.+66     	; 0x888 <__LOCK_REGION_LENGTH__+0x488>
            *(plaintext+i) =  pgm_read_byte(&INV_SBOX[*(plaintext+i)]);
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	88 2f       	mov	r24, r24
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	28 a1       	ldd	r18, Y+32	; 0x20
     84e:	39 a1       	ldd	r19, Y+33	; 0x21
     850:	82 0f       	add	r24, r18
     852:	93 1f       	adc	r25, r19
     854:	29 81       	ldd	r18, Y+1	; 0x01
     856:	22 2f       	mov	r18, r18
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	48 a1       	ldd	r20, Y+32	; 0x20
     85c:	59 a1       	ldd	r21, Y+33	; 0x21
     85e:	24 0f       	add	r18, r20
     860:	35 1f       	adc	r19, r21
     862:	f9 01       	movw	r30, r18
     864:	20 81       	ld	r18, Z
     866:	22 2f       	mov	r18, r18
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	28 59       	subi	r18, 0x98	; 152
     86c:	3f 4f       	sbci	r19, 0xFF	; 255
     86e:	3a 87       	std	Y+10, r19	; 0x0a
     870:	29 87       	std	Y+9, r18	; 0x09
     872:	29 85       	ldd	r18, Y+9	; 0x09
     874:	3a 85       	ldd	r19, Y+10	; 0x0a
     876:	f9 01       	movw	r30, r18
     878:	24 91       	lpm	r18, Z
     87a:	2b 87       	std	Y+11, r18	; 0x0b
     87c:	2b 85       	ldd	r18, Y+11	; 0x0b
     87e:	fc 01       	movw	r30, r24
     880:	20 83       	st	Z, r18
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
        
        // Inverse SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	8f 5f       	subi	r24, 0xFF	; 255
     886:	89 83       	std	Y+1, r24	; 0x01
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	80 31       	cpi	r24, 0x10	; 16
     88c:	e0 f2       	brcs	.-72     	; 0x846 <__LOCK_REGION_LENGTH__+0x446>
            *(plaintext+i) =  pgm_read_byte(&INV_SBOX[*(plaintext+i)]);
        }

        roundkeys -= 16;
     88e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     890:	9d 8d       	ldd	r25, Y+29	; 0x1d
     892:	40 97       	sbiw	r24, 0x10	; 16
     894:	9d 8f       	std	Y+29, r25	; 0x1d
     896:	8c 8f       	std	Y+28, r24	; 0x1c
    inv_shift_rows(plaintext);
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(plaintext+i) =  pgm_read_byte(&INV_SBOX[*(plaintext+i)]);
    }

    for (j = 1; j < AES_ROUNDS; ++j) {
     898:	8a 81       	ldd	r24, Y+2	; 0x02
     89a:	8f 5f       	subi	r24, 0xFF	; 255
     89c:	8a 83       	std	Y+2, r24	; 0x02
     89e:	8a 81       	ldd	r24, Y+2	; 0x02
     8a0:	8a 30       	cpi	r24, 0x0A	; 10
     8a2:	08 f4       	brcc	.+2      	; 0x8a6 <__LOCK_REGION_LENGTH__+0x4a6>
     8a4:	07 ce       	rjmp	.-1010   	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     8a6:	19 82       	std	Y+1, r1	; 0x01
     8a8:	1f c0       	rjmp	.+62     	; 0x8e8 <__LOCK_REGION_LENGTH__+0x4e8>
        *(plaintext+i) ^= *(roundkeys+i);
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	88 2f       	mov	r24, r24
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	28 a1       	ldd	r18, Y+32	; 0x20
     8b2:	39 a1       	ldd	r19, Y+33	; 0x21
     8b4:	82 0f       	add	r24, r18
     8b6:	93 1f       	adc	r25, r19
     8b8:	29 81       	ldd	r18, Y+1	; 0x01
     8ba:	22 2f       	mov	r18, r18
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	48 a1       	ldd	r20, Y+32	; 0x20
     8c0:	59 a1       	ldd	r21, Y+33	; 0x21
     8c2:	24 0f       	add	r18, r20
     8c4:	35 1f       	adc	r19, r21
     8c6:	f9 01       	movw	r30, r18
     8c8:	60 81       	ld	r22, Z
     8ca:	29 81       	ldd	r18, Y+1	; 0x01
     8cc:	22 2f       	mov	r18, r18
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	4c 8d       	ldd	r20, Y+28	; 0x1c
     8d2:	5d 8d       	ldd	r21, Y+29	; 0x1d
     8d4:	24 0f       	add	r18, r20
     8d6:	35 1f       	adc	r19, r21
     8d8:	f9 01       	movw	r30, r18
     8da:	20 81       	ld	r18, Z
     8dc:	26 27       	eor	r18, r22
     8de:	fc 01       	movw	r30, r24
     8e0:	20 83       	st	Z, r18
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	8f 5f       	subi	r24, 0xFF	; 255
     8e6:	89 83       	std	Y+1, r24	; 0x01
     8e8:	89 81       	ldd	r24, Y+1	; 0x01
     8ea:	80 31       	cpi	r24, 0x10	; 16
     8ec:	f0 f2       	brcs	.-68     	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
        *(plaintext+i) ^= *(roundkeys+i);
    }

     8ee:	00 00       	nop
     8f0:	a1 96       	adiw	r28, 0x21	; 33
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	0f 91       	pop	r16
     904:	ff 90       	pop	r15
     906:	08 95       	ret

00000908 <mul2>:
 * Multiply two numbers in the GF(2^8) finite field defined
 * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
static inline uint8_t mul2(uint8_t a) {
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	1f 92       	push	r1
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	89 83       	std	Y+1, r24	; 0x01
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	88 23       	and	r24, r24
     918:	4c f4       	brge	.+18     	; 0x92c <mul2+0x24>
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	88 0f       	add	r24, r24
     922:	99 1f       	adc	r25, r25
     924:	98 2f       	mov	r25, r24
     926:	8b e1       	ldi	r24, 0x1B	; 27
     928:	89 27       	eor	r24, r25
     92a:	02 c0       	rjmp	.+4      	; 0x930 <mul2+0x28>
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	88 0f       	add	r24, r24
}
     930:	0f 90       	pop	r0
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <shift_rows>:
 *  Row0: s0  s4  s8  s12   <<< 0 byte
 *  Row1: s1  s5  s9  s13   <<< 1 byte
 *  Row2: s2  s6  s10 s14   <<< 2 bytes
 *  Row3: s3  s7  s11 s15   <<< 3 bytes
 */
static void shift_rows(uint8_t *state) {
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	00 d0       	rcall	.+0      	; 0x93e <shift_rows+0x6>
     93e:	1f 92       	push	r1
     940:	cd b7       	in	r28, 0x3d	; 61
     942:	de b7       	in	r29, 0x3e	; 62
     944:	9b 83       	std	Y+3, r25	; 0x03
     946:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp;
    // row1
    temp        = *(state+1);
     948:	8a 81       	ldd	r24, Y+2	; 0x02
     94a:	9b 81       	ldd	r25, Y+3	; 0x03
     94c:	fc 01       	movw	r30, r24
     94e:	81 81       	ldd	r24, Z+1	; 0x01
     950:	89 83       	std	Y+1, r24	; 0x01
    *(state+1)  = *(state+5);
     952:	8a 81       	ldd	r24, Y+2	; 0x02
     954:	9b 81       	ldd	r25, Y+3	; 0x03
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	2a 81       	ldd	r18, Y+2	; 0x02
     95a:	3b 81       	ldd	r19, Y+3	; 0x03
     95c:	f9 01       	movw	r30, r18
     95e:	25 81       	ldd	r18, Z+5	; 0x05
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
    *(state+5)  = *(state+9);
     964:	8a 81       	ldd	r24, Y+2	; 0x02
     966:	9b 81       	ldd	r25, Y+3	; 0x03
     968:	05 96       	adiw	r24, 0x05	; 5
     96a:	2a 81       	ldd	r18, Y+2	; 0x02
     96c:	3b 81       	ldd	r19, Y+3	; 0x03
     96e:	f9 01       	movw	r30, r18
     970:	21 85       	ldd	r18, Z+9	; 0x09
     972:	fc 01       	movw	r30, r24
     974:	20 83       	st	Z, r18
    *(state+9)  = *(state+13);
     976:	8a 81       	ldd	r24, Y+2	; 0x02
     978:	9b 81       	ldd	r25, Y+3	; 0x03
     97a:	09 96       	adiw	r24, 0x09	; 9
     97c:	2a 81       	ldd	r18, Y+2	; 0x02
     97e:	3b 81       	ldd	r19, Y+3	; 0x03
     980:	f9 01       	movw	r30, r18
     982:	25 85       	ldd	r18, Z+13	; 0x0d
     984:	fc 01       	movw	r30, r24
     986:	20 83       	st	Z, r18
    *(state+13) = temp;
     988:	8a 81       	ldd	r24, Y+2	; 0x02
     98a:	9b 81       	ldd	r25, Y+3	; 0x03
     98c:	0d 96       	adiw	r24, 0x0d	; 13
     98e:	29 81       	ldd	r18, Y+1	; 0x01
     990:	fc 01       	movw	r30, r24
     992:	20 83       	st	Z, r18
    // row2
    temp        = *(state+2);
     994:	8a 81       	ldd	r24, Y+2	; 0x02
     996:	9b 81       	ldd	r25, Y+3	; 0x03
     998:	fc 01       	movw	r30, r24
     99a:	82 81       	ldd	r24, Z+2	; 0x02
     99c:	89 83       	std	Y+1, r24	; 0x01
    *(state+2)  = *(state+10);
     99e:	8a 81       	ldd	r24, Y+2	; 0x02
     9a0:	9b 81       	ldd	r25, Y+3	; 0x03
     9a2:	02 96       	adiw	r24, 0x02	; 2
     9a4:	2a 81       	ldd	r18, Y+2	; 0x02
     9a6:	3b 81       	ldd	r19, Y+3	; 0x03
     9a8:	f9 01       	movw	r30, r18
     9aa:	22 85       	ldd	r18, Z+10	; 0x0a
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18
    *(state+10) = temp;
     9b0:	8a 81       	ldd	r24, Y+2	; 0x02
     9b2:	9b 81       	ldd	r25, Y+3	; 0x03
     9b4:	0a 96       	adiw	r24, 0x0a	; 10
     9b6:	29 81       	ldd	r18, Y+1	; 0x01
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
    temp        = *(state+6);
     9bc:	8a 81       	ldd	r24, Y+2	; 0x02
     9be:	9b 81       	ldd	r25, Y+3	; 0x03
     9c0:	fc 01       	movw	r30, r24
     9c2:	86 81       	ldd	r24, Z+6	; 0x06
     9c4:	89 83       	std	Y+1, r24	; 0x01
    *(state+6)  = *(state+14);
     9c6:	8a 81       	ldd	r24, Y+2	; 0x02
     9c8:	9b 81       	ldd	r25, Y+3	; 0x03
     9ca:	06 96       	adiw	r24, 0x06	; 6
     9cc:	2a 81       	ldd	r18, Y+2	; 0x02
     9ce:	3b 81       	ldd	r19, Y+3	; 0x03
     9d0:	f9 01       	movw	r30, r18
     9d2:	26 85       	ldd	r18, Z+14	; 0x0e
     9d4:	fc 01       	movw	r30, r24
     9d6:	20 83       	st	Z, r18
    *(state+14) = temp;
     9d8:	8a 81       	ldd	r24, Y+2	; 0x02
     9da:	9b 81       	ldd	r25, Y+3	; 0x03
     9dc:	0e 96       	adiw	r24, 0x0e	; 14
     9de:	29 81       	ldd	r18, Y+1	; 0x01
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
    // row3
    temp        = *(state+15);
     9e4:	8a 81       	ldd	r24, Y+2	; 0x02
     9e6:	9b 81       	ldd	r25, Y+3	; 0x03
     9e8:	fc 01       	movw	r30, r24
     9ea:	87 85       	ldd	r24, Z+15	; 0x0f
     9ec:	89 83       	std	Y+1, r24	; 0x01
    *(state+15) = *(state+11);
     9ee:	8a 81       	ldd	r24, Y+2	; 0x02
     9f0:	9b 81       	ldd	r25, Y+3	; 0x03
     9f2:	0f 96       	adiw	r24, 0x0f	; 15
     9f4:	2a 81       	ldd	r18, Y+2	; 0x02
     9f6:	3b 81       	ldd	r19, Y+3	; 0x03
     9f8:	f9 01       	movw	r30, r18
     9fa:	23 85       	ldd	r18, Z+11	; 0x0b
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 83       	st	Z, r18
    *(state+11) = *(state+7);
     a00:	8a 81       	ldd	r24, Y+2	; 0x02
     a02:	9b 81       	ldd	r25, Y+3	; 0x03
     a04:	0b 96       	adiw	r24, 0x0b	; 11
     a06:	2a 81       	ldd	r18, Y+2	; 0x02
     a08:	3b 81       	ldd	r19, Y+3	; 0x03
     a0a:	f9 01       	movw	r30, r18
     a0c:	27 81       	ldd	r18, Z+7	; 0x07
     a0e:	fc 01       	movw	r30, r24
     a10:	20 83       	st	Z, r18
    *(state+7)  = *(state+3);
     a12:	8a 81       	ldd	r24, Y+2	; 0x02
     a14:	9b 81       	ldd	r25, Y+3	; 0x03
     a16:	07 96       	adiw	r24, 0x07	; 7
     a18:	2a 81       	ldd	r18, Y+2	; 0x02
     a1a:	3b 81       	ldd	r19, Y+3	; 0x03
     a1c:	f9 01       	movw	r30, r18
     a1e:	23 81       	ldd	r18, Z+3	; 0x03
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18
    *(state+3)  = temp;
     a24:	8a 81       	ldd	r24, Y+2	; 0x02
     a26:	9b 81       	ldd	r25, Y+3	; 0x03
     a28:	03 96       	adiw	r24, 0x03	; 3
     a2a:	29 81       	ldd	r18, Y+1	; 0x01
     a2c:	fc 01       	movw	r30, r24
     a2e:	20 83       	st	Z, r18
}
     a30:	00 00       	nop
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <aes_encrypt_128>:

void aes_encrypt_128(uint8_t *roundkeys,  uint8_t const  *plaintext,  uint8_t *ciphertext) {
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	a2 97       	sbiw	r28, 0x22	; 34
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
     a56:	9e 8f       	std	Y+30, r25	; 0x1e
     a58:	8d 8f       	std	Y+29, r24	; 0x1d
     a5a:	78 a3       	std	Y+32, r23	; 0x20
     a5c:	6f 8f       	std	Y+31, r22	; 0x1f
     a5e:	5a a3       	std	Y+34, r21	; 0x22
     a60:	49 a3       	std	Y+33, r20	; 0x21

    uint8_t tmp[16], t;
    uint8_t i, j;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     a62:	19 82       	std	Y+1, r1	; 0x01
     a64:	25 c0       	rjmp	.+74     	; 0xab0 <aes_encrypt_128+0x72>
        *(ciphertext+i) =  pgm_read_byte(&(*(plaintext+i))) ^ *roundkeys++;
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	88 2f       	mov	r24, r24
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	29 a1       	ldd	r18, Y+33	; 0x21
     a6e:	3a a1       	ldd	r19, Y+34	; 0x22
     a70:	28 0f       	add	r18, r24
     a72:	39 1f       	adc	r19, r25
     a74:	89 81       	ldd	r24, Y+1	; 0x01
     a76:	88 2f       	mov	r24, r24
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	4f 8d       	ldd	r20, Y+31	; 0x1f
     a7c:	58 a1       	ldd	r21, Y+32	; 0x20
     a7e:	84 0f       	add	r24, r20
     a80:	95 1f       	adc	r25, r21
     a82:	9c 83       	std	Y+4, r25	; 0x04
     a84:	8b 83       	std	Y+3, r24	; 0x03
     a86:	8b 81       	ldd	r24, Y+3	; 0x03
     a88:	9c 81       	ldd	r25, Y+4	; 0x04
     a8a:	fc 01       	movw	r30, r24
     a8c:	84 91       	lpm	r24, Z
     a8e:	8d 83       	std	Y+5, r24	; 0x05
     a90:	6d 81       	ldd	r22, Y+5	; 0x05
     a92:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a94:	9e 8d       	ldd	r25, Y+30	; 0x1e
     a96:	ac 01       	movw	r20, r24
     a98:	4f 5f       	subi	r20, 0xFF	; 255
     a9a:	5f 4f       	sbci	r21, 0xFF	; 255
     a9c:	5e 8f       	std	Y+30, r21	; 0x1e
     a9e:	4d 8f       	std	Y+29, r20	; 0x1d
     aa0:	fc 01       	movw	r30, r24
     aa2:	80 81       	ld	r24, Z
     aa4:	86 27       	eor	r24, r22
     aa6:	f9 01       	movw	r30, r18
     aa8:	80 83       	st	Z, r24

    uint8_t tmp[16], t;
    uint8_t i, j;

    // first AddRoundKey
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	8f 5f       	subi	r24, 0xFF	; 255
     aae:	89 83       	std	Y+1, r24	; 0x01
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	80 31       	cpi	r24, 0x10	; 16
     ab4:	c0 f2       	brcs	.-80     	; 0xa66 <aes_encrypt_128+0x28>
        *(ciphertext+i) =  pgm_read_byte(&(*(plaintext+i))) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	8a 83       	std	Y+2, r24	; 0x02
     aba:	56 c1       	rjmp	.+684    	; 0xd68 <aes_encrypt_128+0x32a>

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     abc:	19 82       	std	Y+1, r1	; 0x01
     abe:	22 c0       	rjmp	.+68     	; 0xb04 <aes_encrypt_128+0xc6>
            *(tmp+i) = pgm_read_byte(&SBOX[*(ciphertext+i)]);
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	88 2f       	mov	r24, r24
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	9e 01       	movw	r18, r28
     ac8:	23 5f       	subi	r18, 0xF3	; 243
     aca:	3f 4f       	sbci	r19, 0xFF	; 255
     acc:	82 0f       	add	r24, r18
     ace:	93 1f       	adc	r25, r19
     ad0:	29 81       	ldd	r18, Y+1	; 0x01
     ad2:	22 2f       	mov	r18, r18
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	49 a1       	ldd	r20, Y+33	; 0x21
     ad8:	5a a1       	ldd	r21, Y+34	; 0x22
     ada:	24 0f       	add	r18, r20
     adc:	35 1f       	adc	r19, r21
     ade:	f9 01       	movw	r30, r18
     ae0:	20 81       	ld	r18, Z
     ae2:	22 2f       	mov	r18, r18
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	28 59       	subi	r18, 0x98	; 152
     ae8:	3e 4f       	sbci	r19, 0xFE	; 254
     aea:	3f 83       	std	Y+7, r19	; 0x07
     aec:	2e 83       	std	Y+6, r18	; 0x06
     aee:	2e 81       	ldd	r18, Y+6	; 0x06
     af0:	3f 81       	ldd	r19, Y+7	; 0x07
     af2:	f9 01       	movw	r30, r18
     af4:	24 91       	lpm	r18, Z
     af6:	28 87       	std	Y+8, r18	; 0x08
     af8:	28 85       	ldd	r18, Y+8	; 0x08
     afa:	fc 01       	movw	r30, r24
     afc:	20 83       	st	Z, r18

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {

        // SubBytes
        for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	8f 5f       	subi	r24, 0xFF	; 255
     b02:	89 83       	std	Y+1, r24	; 0x01
     b04:	89 81       	ldd	r24, Y+1	; 0x01
     b06:	80 31       	cpi	r24, 0x10	; 16
     b08:	d8 f2       	brcs	.-74     	; 0xac0 <aes_encrypt_128+0x82>
            *(tmp+i) = pgm_read_byte(&SBOX[*(ciphertext+i)]);
        }
        shift_rows(tmp);
     b0a:	ce 01       	movw	r24, r28
     b0c:	0d 96       	adiw	r24, 0x0d	; 13
     b0e:	0e 94 9c 04 	call	0x938	; 0x938 <shift_rows>
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4){  
     b12:	19 82       	std	Y+1, r1	; 0x01
     b14:	fe c0       	rjmp	.+508    	; 0xd12 <aes_encrypt_128+0x2d4>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	88 2f       	mov	r24, r24
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	9e 01       	movw	r18, r28
     b1e:	23 5f       	subi	r18, 0xF3	; 243
     b20:	3f 4f       	sbci	r19, 0xFF	; 255
     b22:	82 0f       	add	r24, r18
     b24:	93 1f       	adc	r25, r19
     b26:	fc 01       	movw	r30, r24
     b28:	40 81       	ld	r20, Z
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	88 2f       	mov	r24, r24
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	9e 01       	movw	r18, r28
     b34:	23 5f       	subi	r18, 0xF3	; 243
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	82 0f       	add	r24, r18
     b3a:	93 1f       	adc	r25, r19
     b3c:	fc 01       	movw	r30, r24
     b3e:	80 81       	ld	r24, Z
     b40:	48 27       	eor	r20, r24
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	88 2f       	mov	r24, r24
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	02 96       	adiw	r24, 0x02	; 2
     b4a:	9e 01       	movw	r18, r28
     b4c:	23 5f       	subi	r18, 0xF3	; 243
     b4e:	3f 4f       	sbci	r19, 0xFF	; 255
     b50:	82 0f       	add	r24, r18
     b52:	93 1f       	adc	r25, r19
     b54:	fc 01       	movw	r30, r24
     b56:	80 81       	ld	r24, Z
     b58:	48 27       	eor	r20, r24
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	88 2f       	mov	r24, r24
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	03 96       	adiw	r24, 0x03	; 3
     b62:	9e 01       	movw	r18, r28
     b64:	23 5f       	subi	r18, 0xF3	; 243
     b66:	3f 4f       	sbci	r19, 0xFF	; 255
     b68:	82 0f       	add	r24, r18
     b6a:	93 1f       	adc	r25, r19
     b6c:	fc 01       	movw	r30, r24
     b6e:	80 81       	ld	r24, Z
     b70:	84 27       	eor	r24, r20
     b72:	89 87       	std	Y+9, r24	; 0x09
            ciphertext[i]   = mul2(tmp[i]   ^ tmp[i+1]) ^ tmp[i]   ^ t;
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	88 2f       	mov	r24, r24
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	29 a1       	ldd	r18, Y+33	; 0x21
     b7c:	3a a1       	ldd	r19, Y+34	; 0x22
     b7e:	89 01       	movw	r16, r18
     b80:	08 0f       	add	r16, r24
     b82:	19 1f       	adc	r17, r25
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	88 2f       	mov	r24, r24
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	9e 01       	movw	r18, r28
     b8c:	23 5f       	subi	r18, 0xF3	; 243
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	82 0f       	add	r24, r18
     b92:	93 1f       	adc	r25, r19
     b94:	fc 01       	movw	r30, r24
     b96:	40 81       	ld	r20, Z
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	88 2f       	mov	r24, r24
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	9e 01       	movw	r18, r28
     ba2:	23 5f       	subi	r18, 0xF3	; 243
     ba4:	3f 4f       	sbci	r19, 0xFF	; 255
     ba6:	82 0f       	add	r24, r18
     ba8:	93 1f       	adc	r25, r19
     baa:	fc 01       	movw	r30, r24
     bac:	80 81       	ld	r24, Z
     bae:	84 27       	eor	r24, r20
     bb0:	0e 94 84 04 	call	0x908	; 0x908 <mul2>
     bb4:	48 2f       	mov	r20, r24
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	88 2f       	mov	r24, r24
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	9e 01       	movw	r18, r28
     bbe:	23 5f       	subi	r18, 0xF3	; 243
     bc0:	3f 4f       	sbci	r19, 0xFF	; 255
     bc2:	82 0f       	add	r24, r18
     bc4:	93 1f       	adc	r25, r19
     bc6:	fc 01       	movw	r30, r24
     bc8:	80 81       	ld	r24, Z
     bca:	94 2f       	mov	r25, r20
     bcc:	98 27       	eor	r25, r24
     bce:	89 85       	ldd	r24, Y+9	; 0x09
     bd0:	89 27       	eor	r24, r25
     bd2:	f8 01       	movw	r30, r16
     bd4:	80 83       	st	Z, r24
            ciphertext[i+1] = mul2(tmp[i+1] ^ tmp[i+2]) ^ tmp[i+1] ^ t;
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	88 2f       	mov	r24, r24
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	29 a1       	ldd	r18, Y+33	; 0x21
     be0:	3a a1       	ldd	r19, Y+34	; 0x22
     be2:	89 01       	movw	r16, r18
     be4:	08 0f       	add	r16, r24
     be6:	19 1f       	adc	r17, r25
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	88 2f       	mov	r24, r24
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	9e 01       	movw	r18, r28
     bf2:	23 5f       	subi	r18, 0xF3	; 243
     bf4:	3f 4f       	sbci	r19, 0xFF	; 255
     bf6:	82 0f       	add	r24, r18
     bf8:	93 1f       	adc	r25, r19
     bfa:	fc 01       	movw	r30, r24
     bfc:	40 81       	ld	r20, Z
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	02 96       	adiw	r24, 0x02	; 2
     c06:	9e 01       	movw	r18, r28
     c08:	23 5f       	subi	r18, 0xF3	; 243
     c0a:	3f 4f       	sbci	r19, 0xFF	; 255
     c0c:	82 0f       	add	r24, r18
     c0e:	93 1f       	adc	r25, r19
     c10:	fc 01       	movw	r30, r24
     c12:	80 81       	ld	r24, Z
     c14:	84 27       	eor	r24, r20
     c16:	0e 94 84 04 	call	0x908	; 0x908 <mul2>
     c1a:	48 2f       	mov	r20, r24
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	88 2f       	mov	r24, r24
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	9e 01       	movw	r18, r28
     c26:	23 5f       	subi	r18, 0xF3	; 243
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	82 0f       	add	r24, r18
     c2c:	93 1f       	adc	r25, r19
     c2e:	fc 01       	movw	r30, r24
     c30:	80 81       	ld	r24, Z
     c32:	94 2f       	mov	r25, r20
     c34:	98 27       	eor	r25, r24
     c36:	89 85       	ldd	r24, Y+9	; 0x09
     c38:	89 27       	eor	r24, r25
     c3a:	f8 01       	movw	r30, r16
     c3c:	80 83       	st	Z, r24
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	02 96       	adiw	r24, 0x02	; 2
     c46:	29 a1       	ldd	r18, Y+33	; 0x21
     c48:	3a a1       	ldd	r19, Y+34	; 0x22
     c4a:	89 01       	movw	r16, r18
     c4c:	08 0f       	add	r16, r24
     c4e:	19 1f       	adc	r17, r25
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	88 2f       	mov	r24, r24
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 96       	adiw	r24, 0x02	; 2
     c58:	9e 01       	movw	r18, r28
     c5a:	23 5f       	subi	r18, 0xF3	; 243
     c5c:	3f 4f       	sbci	r19, 0xFF	; 255
     c5e:	82 0f       	add	r24, r18
     c60:	93 1f       	adc	r25, r19
     c62:	fc 01       	movw	r30, r24
     c64:	40 81       	ld	r20, Z
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	88 2f       	mov	r24, r24
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	03 96       	adiw	r24, 0x03	; 3
     c6e:	9e 01       	movw	r18, r28
     c70:	23 5f       	subi	r18, 0xF3	; 243
     c72:	3f 4f       	sbci	r19, 0xFF	; 255
     c74:	82 0f       	add	r24, r18
     c76:	93 1f       	adc	r25, r19
     c78:	fc 01       	movw	r30, r24
     c7a:	80 81       	ld	r24, Z
     c7c:	84 27       	eor	r24, r20
     c7e:	0e 94 84 04 	call	0x908	; 0x908 <mul2>
     c82:	48 2f       	mov	r20, r24
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 96       	adiw	r24, 0x02	; 2
     c8c:	9e 01       	movw	r18, r28
     c8e:	23 5f       	subi	r18, 0xF3	; 243
     c90:	3f 4f       	sbci	r19, 0xFF	; 255
     c92:	82 0f       	add	r24, r18
     c94:	93 1f       	adc	r25, r19
     c96:	fc 01       	movw	r30, r24
     c98:	80 81       	ld	r24, Z
     c9a:	94 2f       	mov	r25, r20
     c9c:	98 27       	eor	r25, r24
     c9e:	89 85       	ldd	r24, Y+9	; 0x09
     ca0:	89 27       	eor	r24, r25
     ca2:	f8 01       	movw	r30, r16
     ca4:	80 83       	st	Z, r24
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	03 96       	adiw	r24, 0x03	; 3
     cae:	29 a1       	ldd	r18, Y+33	; 0x21
     cb0:	3a a1       	ldd	r19, Y+34	; 0x22
     cb2:	89 01       	movw	r16, r18
     cb4:	08 0f       	add	r16, r24
     cb6:	19 1f       	adc	r17, r25
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	88 2f       	mov	r24, r24
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	03 96       	adiw	r24, 0x03	; 3
     cc0:	9e 01       	movw	r18, r28
     cc2:	23 5f       	subi	r18, 0xF3	; 243
     cc4:	3f 4f       	sbci	r19, 0xFF	; 255
     cc6:	82 0f       	add	r24, r18
     cc8:	93 1f       	adc	r25, r19
     cca:	fc 01       	movw	r30, r24
     ccc:	40 81       	ld	r20, Z
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	88 2f       	mov	r24, r24
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	9e 01       	movw	r18, r28
     cd6:	23 5f       	subi	r18, 0xF3	; 243
     cd8:	3f 4f       	sbci	r19, 0xFF	; 255
     cda:	82 0f       	add	r24, r18
     cdc:	93 1f       	adc	r25, r19
     cde:	fc 01       	movw	r30, r24
     ce0:	80 81       	ld	r24, Z
     ce2:	84 27       	eor	r24, r20
     ce4:	0e 94 84 04 	call	0x908	; 0x908 <mul2>
     ce8:	48 2f       	mov	r20, r24
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	88 2f       	mov	r24, r24
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	03 96       	adiw	r24, 0x03	; 3
     cf2:	9e 01       	movw	r18, r28
     cf4:	23 5f       	subi	r18, 0xF3	; 243
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	82 0f       	add	r24, r18
     cfa:	93 1f       	adc	r25, r19
     cfc:	fc 01       	movw	r30, r24
     cfe:	80 81       	ld	r24, Z
     d00:	94 2f       	mov	r25, r20
     d02:	98 27       	eor	r25, r24
     d04:	89 85       	ldd	r24, Y+9	; 0x09
     d06:	89 27       	eor	r24, r25
     d08:	f8 01       	movw	r30, r16
     d0a:	80 83       	st	Z, r24
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4){  
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	8c 5f       	subi	r24, 0xFC	; 252
     d10:	89 83       	std	Y+1, r24	; 0x01
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	80 31       	cpi	r24, 0x10	; 16
     d16:	08 f4       	brcc	.+2      	; 0xd1a <aes_encrypt_128+0x2dc>
     d18:	fe ce       	rjmp	.-516    	; 0xb16 <aes_encrypt_128+0xd8>
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     d1a:	19 82       	std	Y+1, r1	; 0x01
     d1c:	1f c0       	rjmp	.+62     	; 0xd5c <aes_encrypt_128+0x31e>
            *(ciphertext+i) ^= *roundkeys++;
     d1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d20:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d22:	9c 01       	movw	r18, r24
     d24:	2f 5f       	subi	r18, 0xFF	; 255
     d26:	3f 4f       	sbci	r19, 0xFF	; 255
     d28:	3e 8f       	std	Y+30, r19	; 0x1e
     d2a:	2d 8f       	std	Y+29, r18	; 0x1d
     d2c:	fc 01       	movw	r30, r24
     d2e:	60 81       	ld	r22, Z
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	88 2f       	mov	r24, r24
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	29 a1       	ldd	r18, Y+33	; 0x21
     d38:	3a a1       	ldd	r19, Y+34	; 0x22
     d3a:	82 0f       	add	r24, r18
     d3c:	93 1f       	adc	r25, r19
     d3e:	29 81       	ldd	r18, Y+1	; 0x01
     d40:	22 2f       	mov	r18, r18
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	49 a1       	ldd	r20, Y+33	; 0x21
     d46:	5a a1       	ldd	r21, Y+34	; 0x22
     d48:	24 0f       	add	r18, r20
     d4a:	35 1f       	adc	r19, r21
     d4c:	f9 01       	movw	r30, r18
     d4e:	20 81       	ld	r18, Z
     d50:	26 27       	eor	r18, r22
     d52:	fc 01       	movw	r30, r24
     d54:	20 83       	st	Z, r18
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	8f 5f       	subi	r24, 0xFF	; 255
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	80 31       	cpi	r24, 0x10	; 16
     d60:	f0 f2       	brcs	.-68     	; 0xd1e <aes_encrypt_128+0x2e0>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
        *(ciphertext+i) =  pgm_read_byte(&(*(plaintext+i))) ^ *roundkeys++;
    }

    // 9 rounds
    for (j = 1; j < AES_ROUNDS; ++j) {
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	8f 5f       	subi	r24, 0xFF	; 255
     d66:	8a 83       	std	Y+2, r24	; 0x02
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	8a 30       	cpi	r24, 0x0A	; 10
     d6c:	08 f4       	brcc	.+2      	; 0xd70 <aes_encrypt_128+0x332>
     d6e:	a6 ce       	rjmp	.-692    	; 0xabc <aes_encrypt_128+0x7e>
        }

    }
    
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     d70:	19 82       	std	Y+1, r1	; 0x01
     d72:	21 c0       	rjmp	.+66     	; 0xdb6 <aes_encrypt_128+0x378>
        *(ciphertext+i) = pgm_read_byte(&SBOX[*(ciphertext+i)]);
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	88 2f       	mov	r24, r24
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	29 a1       	ldd	r18, Y+33	; 0x21
     d7c:	3a a1       	ldd	r19, Y+34	; 0x22
     d7e:	82 0f       	add	r24, r18
     d80:	93 1f       	adc	r25, r19
     d82:	29 81       	ldd	r18, Y+1	; 0x01
     d84:	22 2f       	mov	r18, r18
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	49 a1       	ldd	r20, Y+33	; 0x21
     d8a:	5a a1       	ldd	r21, Y+34	; 0x22
     d8c:	24 0f       	add	r18, r20
     d8e:	35 1f       	adc	r19, r21
     d90:	f9 01       	movw	r30, r18
     d92:	20 81       	ld	r18, Z
     d94:	22 2f       	mov	r18, r18
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	28 59       	subi	r18, 0x98	; 152
     d9a:	3e 4f       	sbci	r19, 0xFE	; 254
     d9c:	3b 87       	std	Y+11, r19	; 0x0b
     d9e:	2a 87       	std	Y+10, r18	; 0x0a
     da0:	2a 85       	ldd	r18, Y+10	; 0x0a
     da2:	3b 85       	ldd	r19, Y+11	; 0x0b
     da4:	f9 01       	movw	r30, r18
     da6:	24 91       	lpm	r18, Z
     da8:	2c 87       	std	Y+12, r18	; 0x0c
     daa:	2c 85       	ldd	r18, Y+12	; 0x0c
     dac:	fc 01       	movw	r30, r24
     dae:	20 83       	st	Z, r18
        }

    }
    
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	8f 5f       	subi	r24, 0xFF	; 255
     db4:	89 83       	std	Y+1, r24	; 0x01
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	80 31       	cpi	r24, 0x10	; 16
     dba:	e0 f2       	brcs	.-72     	; 0xd74 <aes_encrypt_128+0x336>
        *(ciphertext+i) = pgm_read_byte(&SBOX[*(ciphertext+i)]);
    }
    shift_rows(ciphertext);
     dbc:	89 a1       	ldd	r24, Y+33	; 0x21
     dbe:	9a a1       	ldd	r25, Y+34	; 0x22
     dc0:	0e 94 9c 04 	call	0x938	; 0x938 <shift_rows>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     dc4:	19 82       	std	Y+1, r1	; 0x01
     dc6:	1f c0       	rjmp	.+62     	; 0xe06 <aes_encrypt_128+0x3c8>
        *(ciphertext+i) ^= *roundkeys++;
     dc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dca:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dcc:	9c 01       	movw	r18, r24
     dce:	2f 5f       	subi	r18, 0xFF	; 255
     dd0:	3f 4f       	sbci	r19, 0xFF	; 255
     dd2:	3e 8f       	std	Y+30, r19	; 0x1e
     dd4:	2d 8f       	std	Y+29, r18	; 0x1d
     dd6:	fc 01       	movw	r30, r24
     dd8:	60 81       	ld	r22, Z
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	29 a1       	ldd	r18, Y+33	; 0x21
     de2:	3a a1       	ldd	r19, Y+34	; 0x22
     de4:	82 0f       	add	r24, r18
     de6:	93 1f       	adc	r25, r19
     de8:	29 81       	ldd	r18, Y+1	; 0x01
     dea:	22 2f       	mov	r18, r18
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	49 a1       	ldd	r20, Y+33	; 0x21
     df0:	5a a1       	ldd	r21, Y+34	; 0x22
     df2:	24 0f       	add	r18, r20
     df4:	35 1f       	adc	r19, r21
     df6:	f9 01       	movw	r30, r18
     df8:	20 81       	ld	r18, Z
     dfa:	26 27       	eor	r18, r22
     dfc:	fc 01       	movw	r30, r24
     dfe:	20 83       	st	Z, r18
    // last round
    for (i = 0; i < AES_BLOCK_SIZE; ++i) {
        *(ciphertext+i) = pgm_read_byte(&SBOX[*(ciphertext+i)]);
    }
    shift_rows(ciphertext);
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	8f 5f       	subi	r24, 0xFF	; 255
     e04:	89 83       	std	Y+1, r24	; 0x01
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	80 31       	cpi	r24, 0x10	; 16
     e0a:	f0 f2       	brcs	.-68     	; 0xdc8 <aes_encrypt_128+0x38a>
        *(ciphertext+i) ^= *roundkeys++;
    }

}
     e0c:	00 00       	nop
     e0e:	a2 96       	adiw	r28, 0x22	; 34
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	08 95       	ret

00000e24 <aes_key_schedule_128>:
#include "aes_encrypt.h"
/*
 * round constants
 */

void aes_key_schedule_128(uint8_t *roundkeys) {
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	67 97       	sbiw	r28, 0x17	; 23
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61
     e38:	9f 8b       	std	Y+23, r25	; 0x17
     e3a:	8e 8b       	std	Y+22, r24	; 0x16
    uint8_t temp[4];
    uint8_t *last4bytes; // point to the last 4 bytes of one round
    uint8_t *lastround;
    uint8_t i;

    for (i = 0; i < 16; ++i) {
     e3c:	1b 82       	std	Y+3, r1	; 0x03
     e3e:	0d c0       	rjmp	.+26     	; 0xe5a <aes_key_schedule_128+0x36>
        roundkeys[i]=i;
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	88 2f       	mov	r24, r24
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	2e 89       	ldd	r18, Y+22	; 0x16
     e48:	3f 89       	ldd	r19, Y+23	; 0x17
     e4a:	82 0f       	add	r24, r18
     e4c:	93 1f       	adc	r25, r19
     e4e:	2b 81       	ldd	r18, Y+3	; 0x03
     e50:	fc 01       	movw	r30, r24
     e52:	20 83       	st	Z, r18
    uint8_t temp[4];
    uint8_t *last4bytes; // point to the last 4 bytes of one round
    uint8_t *lastround;
    uint8_t i;

    for (i = 0; i < 16; ++i) {
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	8f 5f       	subi	r24, 0xFF	; 255
     e58:	8b 83       	std	Y+3, r24	; 0x03
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	80 31       	cpi	r24, 0x10	; 16
     e5e:	80 f3       	brcs	.-32     	; 0xe40 <aes_key_schedule_128+0x1c>
        roundkeys[i]=i;
    }
    last4bytes = roundkeys-4;
     e60:	8e 89       	ldd	r24, Y+22	; 0x16
     e62:	9f 89       	ldd	r25, Y+23	; 0x17
     e64:	04 97       	sbiw	r24, 0x04	; 4
     e66:	9a 83       	std	Y+2, r25	; 0x02
     e68:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0 ; i < AES_ROUNDS; ++i ) {
     e6a:	1b 82       	std	Y+3, r1	; 0x03
     e6c:	1d c2       	rjmp	.+1082   	; 0x12a8 <aes_key_schedule_128+0x484>
        // k0-k3 for next round
        temp[3] = pgm_read_byte(&SBOX[*last4bytes++]);
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	9c 01       	movw	r18, r24
     e74:	2f 5f       	subi	r18, 0xFF	; 255
     e76:	3f 4f       	sbci	r19, 0xFF	; 255
     e78:	3a 83       	std	Y+2, r19	; 0x02
     e7a:	29 83       	std	Y+1, r18	; 0x01
     e7c:	fc 01       	movw	r30, r24
     e7e:	80 81       	ld	r24, Z
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	88 59       	subi	r24, 0x98	; 152
     e86:	9e 4f       	sbci	r25, 0xFE	; 254
     e88:	9d 83       	std	Y+5, r25	; 0x05
     e8a:	8c 83       	std	Y+4, r24	; 0x04
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	9d 81       	ldd	r25, Y+5	; 0x05
     e90:	fc 01       	movw	r30, r24
     e92:	84 91       	lpm	r24, Z
     e94:	8e 83       	std	Y+6, r24	; 0x06
     e96:	8e 81       	ldd	r24, Y+6	; 0x06
     e98:	8d 8b       	std	Y+21, r24	; 0x15
        temp[0] = pgm_read_byte(&SBOX[*last4bytes++]);
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	9a 81       	ldd	r25, Y+2	; 0x02
     e9e:	9c 01       	movw	r18, r24
     ea0:	2f 5f       	subi	r18, 0xFF	; 255
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	3a 83       	std	Y+2, r19	; 0x02
     ea6:	29 83       	std	Y+1, r18	; 0x01
     ea8:	fc 01       	movw	r30, r24
     eaa:	80 81       	ld	r24, Z
     eac:	88 2f       	mov	r24, r24
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	88 59       	subi	r24, 0x98	; 152
     eb2:	9e 4f       	sbci	r25, 0xFE	; 254
     eb4:	98 87       	std	Y+8, r25	; 0x08
     eb6:	8f 83       	std	Y+7, r24	; 0x07
     eb8:	8f 81       	ldd	r24, Y+7	; 0x07
     eba:	98 85       	ldd	r25, Y+8	; 0x08
     ebc:	fc 01       	movw	r30, r24
     ebe:	84 91       	lpm	r24, Z
     ec0:	89 87       	std	Y+9, r24	; 0x09
     ec2:	89 85       	ldd	r24, Y+9	; 0x09
     ec4:	8a 8b       	std	Y+18, r24	; 0x12
        temp[1] = pgm_read_byte(&SBOX[*last4bytes++]);
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	9a 81       	ldd	r25, Y+2	; 0x02
     eca:	9c 01       	movw	r18, r24
     ecc:	2f 5f       	subi	r18, 0xFF	; 255
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	3a 83       	std	Y+2, r19	; 0x02
     ed2:	29 83       	std	Y+1, r18	; 0x01
     ed4:	fc 01       	movw	r30, r24
     ed6:	80 81       	ld	r24, Z
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	88 59       	subi	r24, 0x98	; 152
     ede:	9e 4f       	sbci	r25, 0xFE	; 254
     ee0:	9b 87       	std	Y+11, r25	; 0x0b
     ee2:	8a 87       	std	Y+10, r24	; 0x0a
     ee4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ee6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ee8:	fc 01       	movw	r30, r24
     eea:	84 91       	lpm	r24, Z
     eec:	8c 87       	std	Y+12, r24	; 0x0c
     eee:	8c 85       	ldd	r24, Y+12	; 0x0c
     ef0:	8b 8b       	std	Y+19, r24	; 0x13
        temp[2] = pgm_read_byte(&SBOX[*last4bytes++]);
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	9c 01       	movw	r18, r24
     ef8:	2f 5f       	subi	r18, 0xFF	; 255
     efa:	3f 4f       	sbci	r19, 0xFF	; 255
     efc:	3a 83       	std	Y+2, r19	; 0x02
     efe:	29 83       	std	Y+1, r18	; 0x01
     f00:	fc 01       	movw	r30, r24
     f02:	80 81       	ld	r24, Z
     f04:	88 2f       	mov	r24, r24
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	88 59       	subi	r24, 0x98	; 152
     f0a:	9e 4f       	sbci	r25, 0xFE	; 254
     f0c:	9e 87       	std	Y+14, r25	; 0x0e
     f0e:	8d 87       	std	Y+13, r24	; 0x0d
     f10:	8d 85       	ldd	r24, Y+13	; 0x0d
     f12:	9e 85       	ldd	r25, Y+14	; 0x0e
     f14:	fc 01       	movw	r30, r24
     f16:	84 91       	lpm	r24, Z
     f18:	8f 87       	std	Y+15, r24	; 0x0f
     f1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f1c:	8c 8b       	std	Y+20, r24	; 0x14
		if(i<8){
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	88 30       	cpi	r24, 0x08	; 8
     f22:	78 f4       	brcc	.+30     	; 0xf42 <aes_key_schedule_128+0x11e>
			temp[0] ^= (1<<i);
     f24:	8a 89       	ldd	r24, Y+18	; 0x12
     f26:	48 2f       	mov	r20, r24
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <aes_key_schedule_128+0x114>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	2a 95       	dec	r18
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <aes_key_schedule_128+0x110>
     f3c:	84 27       	eor	r24, r20
     f3e:	8a 8b       	std	Y+18, r24	; 0x12
     f40:	0b c0       	rjmp	.+22     	; 0xf58 <aes_key_schedule_128+0x134>
		}else if(i==8){
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	88 30       	cpi	r24, 0x08	; 8
     f46:	19 f4       	brne	.+6      	; 0xf4e <aes_key_schedule_128+0x12a>
			temp[0]=0x1b;
     f48:	8b e1       	ldi	r24, 0x1B	; 27
     f4a:	8a 8b       	std	Y+18, r24	; 0x12
     f4c:	05 c0       	rjmp	.+10     	; 0xf58 <aes_key_schedule_128+0x134>
		}else if(i==9){
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	89 30       	cpi	r24, 0x09	; 9
     f52:	11 f4       	brne	.+4      	; 0xf58 <aes_key_schedule_128+0x134>
			temp[0]=0x36;
     f54:	86 e3       	ldi	r24, 0x36	; 54
     f56:	8a 8b       	std	Y+18, r24	; 0x12
		}
		
        lastround = roundkeys-16;
     f58:	8e 89       	ldd	r24, Y+22	; 0x16
     f5a:	9f 89       	ldd	r25, Y+23	; 0x17
     f5c:	40 97       	sbiw	r24, 0x10	; 16
     f5e:	99 8b       	std	Y+17, r25	; 0x11
     f60:	88 8b       	std	Y+16, r24	; 0x10
        *roundkeys++ = temp[0] ^ *lastround++;
     f62:	8e 89       	ldd	r24, Y+22	; 0x16
     f64:	9f 89       	ldd	r25, Y+23	; 0x17
     f66:	9c 01       	movw	r18, r24
     f68:	2f 5f       	subi	r18, 0xFF	; 255
     f6a:	3f 4f       	sbci	r19, 0xFF	; 255
     f6c:	3f 8b       	std	Y+23, r19	; 0x17
     f6e:	2e 8b       	std	Y+22, r18	; 0x16
     f70:	6a 89       	ldd	r22, Y+18	; 0x12
     f72:	28 89       	ldd	r18, Y+16	; 0x10
     f74:	39 89       	ldd	r19, Y+17	; 0x11
     f76:	a9 01       	movw	r20, r18
     f78:	4f 5f       	subi	r20, 0xFF	; 255
     f7a:	5f 4f       	sbci	r21, 0xFF	; 255
     f7c:	59 8b       	std	Y+17, r21	; 0x11
     f7e:	48 8b       	std	Y+16, r20	; 0x10
     f80:	f9 01       	movw	r30, r18
     f82:	20 81       	ld	r18, Z
     f84:	26 27       	eor	r18, r22
     f86:	fc 01       	movw	r30, r24
     f88:	20 83       	st	Z, r18
        *roundkeys++ = temp[1] ^ *lastround++;
     f8a:	8e 89       	ldd	r24, Y+22	; 0x16
     f8c:	9f 89       	ldd	r25, Y+23	; 0x17
     f8e:	9c 01       	movw	r18, r24
     f90:	2f 5f       	subi	r18, 0xFF	; 255
     f92:	3f 4f       	sbci	r19, 0xFF	; 255
     f94:	3f 8b       	std	Y+23, r19	; 0x17
     f96:	2e 8b       	std	Y+22, r18	; 0x16
     f98:	6b 89       	ldd	r22, Y+19	; 0x13
     f9a:	28 89       	ldd	r18, Y+16	; 0x10
     f9c:	39 89       	ldd	r19, Y+17	; 0x11
     f9e:	a9 01       	movw	r20, r18
     fa0:	4f 5f       	subi	r20, 0xFF	; 255
     fa2:	5f 4f       	sbci	r21, 0xFF	; 255
     fa4:	59 8b       	std	Y+17, r21	; 0x11
     fa6:	48 8b       	std	Y+16, r20	; 0x10
     fa8:	f9 01       	movw	r30, r18
     faa:	20 81       	ld	r18, Z
     fac:	26 27       	eor	r18, r22
     fae:	fc 01       	movw	r30, r24
     fb0:	20 83       	st	Z, r18
        *roundkeys++ = temp[2] ^ *lastround++;
     fb2:	8e 89       	ldd	r24, Y+22	; 0x16
     fb4:	9f 89       	ldd	r25, Y+23	; 0x17
     fb6:	9c 01       	movw	r18, r24
     fb8:	2f 5f       	subi	r18, 0xFF	; 255
     fba:	3f 4f       	sbci	r19, 0xFF	; 255
     fbc:	3f 8b       	std	Y+23, r19	; 0x17
     fbe:	2e 8b       	std	Y+22, r18	; 0x16
     fc0:	6c 89       	ldd	r22, Y+20	; 0x14
     fc2:	28 89       	ldd	r18, Y+16	; 0x10
     fc4:	39 89       	ldd	r19, Y+17	; 0x11
     fc6:	a9 01       	movw	r20, r18
     fc8:	4f 5f       	subi	r20, 0xFF	; 255
     fca:	5f 4f       	sbci	r21, 0xFF	; 255
     fcc:	59 8b       	std	Y+17, r21	; 0x11
     fce:	48 8b       	std	Y+16, r20	; 0x10
     fd0:	f9 01       	movw	r30, r18
     fd2:	20 81       	ld	r18, Z
     fd4:	26 27       	eor	r18, r22
     fd6:	fc 01       	movw	r30, r24
     fd8:	20 83       	st	Z, r18
        *roundkeys++ = temp[3] ^ *lastround++;
     fda:	8e 89       	ldd	r24, Y+22	; 0x16
     fdc:	9f 89       	ldd	r25, Y+23	; 0x17
     fde:	9c 01       	movw	r18, r24
     fe0:	2f 5f       	subi	r18, 0xFF	; 255
     fe2:	3f 4f       	sbci	r19, 0xFF	; 255
     fe4:	3f 8b       	std	Y+23, r19	; 0x17
     fe6:	2e 8b       	std	Y+22, r18	; 0x16
     fe8:	6d 89       	ldd	r22, Y+21	; 0x15
     fea:	28 89       	ldd	r18, Y+16	; 0x10
     fec:	39 89       	ldd	r19, Y+17	; 0x11
     fee:	a9 01       	movw	r20, r18
     ff0:	4f 5f       	subi	r20, 0xFF	; 255
     ff2:	5f 4f       	sbci	r21, 0xFF	; 255
     ff4:	59 8b       	std	Y+17, r21	; 0x11
     ff6:	48 8b       	std	Y+16, r20	; 0x10
     ff8:	f9 01       	movw	r30, r18
     ffa:	20 81       	ld	r18, Z
     ffc:	26 27       	eor	r18, r22
     ffe:	fc 01       	movw	r30, r24
    1000:	20 83       	st	Z, r18
        // k4-k7 for next round        
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    1002:	8e 89       	ldd	r24, Y+22	; 0x16
    1004:	9f 89       	ldd	r25, Y+23	; 0x17
    1006:	9c 01       	movw	r18, r24
    1008:	2f 5f       	subi	r18, 0xFF	; 255
    100a:	3f 4f       	sbci	r19, 0xFF	; 255
    100c:	3f 8b       	std	Y+23, r19	; 0x17
    100e:	2e 8b       	std	Y+22, r18	; 0x16
    1010:	29 81       	ldd	r18, Y+1	; 0x01
    1012:	3a 81       	ldd	r19, Y+2	; 0x02
    1014:	a9 01       	movw	r20, r18
    1016:	4f 5f       	subi	r20, 0xFF	; 255
    1018:	5f 4f       	sbci	r21, 0xFF	; 255
    101a:	5a 83       	std	Y+2, r21	; 0x02
    101c:	49 83       	std	Y+1, r20	; 0x01
    101e:	f9 01       	movw	r30, r18
    1020:	60 81       	ld	r22, Z
    1022:	28 89       	ldd	r18, Y+16	; 0x10
    1024:	39 89       	ldd	r19, Y+17	; 0x11
    1026:	a9 01       	movw	r20, r18
    1028:	4f 5f       	subi	r20, 0xFF	; 255
    102a:	5f 4f       	sbci	r21, 0xFF	; 255
    102c:	59 8b       	std	Y+17, r21	; 0x11
    102e:	48 8b       	std	Y+16, r20	; 0x10
    1030:	f9 01       	movw	r30, r18
    1032:	20 81       	ld	r18, Z
    1034:	26 27       	eor	r18, r22
    1036:	fc 01       	movw	r30, r24
    1038:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    103a:	8e 89       	ldd	r24, Y+22	; 0x16
    103c:	9f 89       	ldd	r25, Y+23	; 0x17
    103e:	9c 01       	movw	r18, r24
    1040:	2f 5f       	subi	r18, 0xFF	; 255
    1042:	3f 4f       	sbci	r19, 0xFF	; 255
    1044:	3f 8b       	std	Y+23, r19	; 0x17
    1046:	2e 8b       	std	Y+22, r18	; 0x16
    1048:	29 81       	ldd	r18, Y+1	; 0x01
    104a:	3a 81       	ldd	r19, Y+2	; 0x02
    104c:	a9 01       	movw	r20, r18
    104e:	4f 5f       	subi	r20, 0xFF	; 255
    1050:	5f 4f       	sbci	r21, 0xFF	; 255
    1052:	5a 83       	std	Y+2, r21	; 0x02
    1054:	49 83       	std	Y+1, r20	; 0x01
    1056:	f9 01       	movw	r30, r18
    1058:	60 81       	ld	r22, Z
    105a:	28 89       	ldd	r18, Y+16	; 0x10
    105c:	39 89       	ldd	r19, Y+17	; 0x11
    105e:	a9 01       	movw	r20, r18
    1060:	4f 5f       	subi	r20, 0xFF	; 255
    1062:	5f 4f       	sbci	r21, 0xFF	; 255
    1064:	59 8b       	std	Y+17, r21	; 0x11
    1066:	48 8b       	std	Y+16, r20	; 0x10
    1068:	f9 01       	movw	r30, r18
    106a:	20 81       	ld	r18, Z
    106c:	26 27       	eor	r18, r22
    106e:	fc 01       	movw	r30, r24
    1070:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    1072:	8e 89       	ldd	r24, Y+22	; 0x16
    1074:	9f 89       	ldd	r25, Y+23	; 0x17
    1076:	9c 01       	movw	r18, r24
    1078:	2f 5f       	subi	r18, 0xFF	; 255
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	3f 8b       	std	Y+23, r19	; 0x17
    107e:	2e 8b       	std	Y+22, r18	; 0x16
    1080:	29 81       	ldd	r18, Y+1	; 0x01
    1082:	3a 81       	ldd	r19, Y+2	; 0x02
    1084:	a9 01       	movw	r20, r18
    1086:	4f 5f       	subi	r20, 0xFF	; 255
    1088:	5f 4f       	sbci	r21, 0xFF	; 255
    108a:	5a 83       	std	Y+2, r21	; 0x02
    108c:	49 83       	std	Y+1, r20	; 0x01
    108e:	f9 01       	movw	r30, r18
    1090:	60 81       	ld	r22, Z
    1092:	28 89       	ldd	r18, Y+16	; 0x10
    1094:	39 89       	ldd	r19, Y+17	; 0x11
    1096:	a9 01       	movw	r20, r18
    1098:	4f 5f       	subi	r20, 0xFF	; 255
    109a:	5f 4f       	sbci	r21, 0xFF	; 255
    109c:	59 8b       	std	Y+17, r21	; 0x11
    109e:	48 8b       	std	Y+16, r20	; 0x10
    10a0:	f9 01       	movw	r30, r18
    10a2:	20 81       	ld	r18, Z
    10a4:	26 27       	eor	r18, r22
    10a6:	fc 01       	movw	r30, r24
    10a8:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    10aa:	8e 89       	ldd	r24, Y+22	; 0x16
    10ac:	9f 89       	ldd	r25, Y+23	; 0x17
    10ae:	9c 01       	movw	r18, r24
    10b0:	2f 5f       	subi	r18, 0xFF	; 255
    10b2:	3f 4f       	sbci	r19, 0xFF	; 255
    10b4:	3f 8b       	std	Y+23, r19	; 0x17
    10b6:	2e 8b       	std	Y+22, r18	; 0x16
    10b8:	29 81       	ldd	r18, Y+1	; 0x01
    10ba:	3a 81       	ldd	r19, Y+2	; 0x02
    10bc:	a9 01       	movw	r20, r18
    10be:	4f 5f       	subi	r20, 0xFF	; 255
    10c0:	5f 4f       	sbci	r21, 0xFF	; 255
    10c2:	5a 83       	std	Y+2, r21	; 0x02
    10c4:	49 83       	std	Y+1, r20	; 0x01
    10c6:	f9 01       	movw	r30, r18
    10c8:	60 81       	ld	r22, Z
    10ca:	28 89       	ldd	r18, Y+16	; 0x10
    10cc:	39 89       	ldd	r19, Y+17	; 0x11
    10ce:	a9 01       	movw	r20, r18
    10d0:	4f 5f       	subi	r20, 0xFF	; 255
    10d2:	5f 4f       	sbci	r21, 0xFF	; 255
    10d4:	59 8b       	std	Y+17, r21	; 0x11
    10d6:	48 8b       	std	Y+16, r20	; 0x10
    10d8:	f9 01       	movw	r30, r18
    10da:	20 81       	ld	r18, Z
    10dc:	26 27       	eor	r18, r22
    10de:	fc 01       	movw	r30, r24
    10e0:	20 83       	st	Z, r18
        // k8-k11 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    10e2:	8e 89       	ldd	r24, Y+22	; 0x16
    10e4:	9f 89       	ldd	r25, Y+23	; 0x17
    10e6:	9c 01       	movw	r18, r24
    10e8:	2f 5f       	subi	r18, 0xFF	; 255
    10ea:	3f 4f       	sbci	r19, 0xFF	; 255
    10ec:	3f 8b       	std	Y+23, r19	; 0x17
    10ee:	2e 8b       	std	Y+22, r18	; 0x16
    10f0:	29 81       	ldd	r18, Y+1	; 0x01
    10f2:	3a 81       	ldd	r19, Y+2	; 0x02
    10f4:	a9 01       	movw	r20, r18
    10f6:	4f 5f       	subi	r20, 0xFF	; 255
    10f8:	5f 4f       	sbci	r21, 0xFF	; 255
    10fa:	5a 83       	std	Y+2, r21	; 0x02
    10fc:	49 83       	std	Y+1, r20	; 0x01
    10fe:	f9 01       	movw	r30, r18
    1100:	60 81       	ld	r22, Z
    1102:	28 89       	ldd	r18, Y+16	; 0x10
    1104:	39 89       	ldd	r19, Y+17	; 0x11
    1106:	a9 01       	movw	r20, r18
    1108:	4f 5f       	subi	r20, 0xFF	; 255
    110a:	5f 4f       	sbci	r21, 0xFF	; 255
    110c:	59 8b       	std	Y+17, r21	; 0x11
    110e:	48 8b       	std	Y+16, r20	; 0x10
    1110:	f9 01       	movw	r30, r18
    1112:	20 81       	ld	r18, Z
    1114:	26 27       	eor	r18, r22
    1116:	fc 01       	movw	r30, r24
    1118:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    111a:	8e 89       	ldd	r24, Y+22	; 0x16
    111c:	9f 89       	ldd	r25, Y+23	; 0x17
    111e:	9c 01       	movw	r18, r24
    1120:	2f 5f       	subi	r18, 0xFF	; 255
    1122:	3f 4f       	sbci	r19, 0xFF	; 255
    1124:	3f 8b       	std	Y+23, r19	; 0x17
    1126:	2e 8b       	std	Y+22, r18	; 0x16
    1128:	29 81       	ldd	r18, Y+1	; 0x01
    112a:	3a 81       	ldd	r19, Y+2	; 0x02
    112c:	a9 01       	movw	r20, r18
    112e:	4f 5f       	subi	r20, 0xFF	; 255
    1130:	5f 4f       	sbci	r21, 0xFF	; 255
    1132:	5a 83       	std	Y+2, r21	; 0x02
    1134:	49 83       	std	Y+1, r20	; 0x01
    1136:	f9 01       	movw	r30, r18
    1138:	60 81       	ld	r22, Z
    113a:	28 89       	ldd	r18, Y+16	; 0x10
    113c:	39 89       	ldd	r19, Y+17	; 0x11
    113e:	a9 01       	movw	r20, r18
    1140:	4f 5f       	subi	r20, 0xFF	; 255
    1142:	5f 4f       	sbci	r21, 0xFF	; 255
    1144:	59 8b       	std	Y+17, r21	; 0x11
    1146:	48 8b       	std	Y+16, r20	; 0x10
    1148:	f9 01       	movw	r30, r18
    114a:	20 81       	ld	r18, Z
    114c:	26 27       	eor	r18, r22
    114e:	fc 01       	movw	r30, r24
    1150:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    1152:	8e 89       	ldd	r24, Y+22	; 0x16
    1154:	9f 89       	ldd	r25, Y+23	; 0x17
    1156:	9c 01       	movw	r18, r24
    1158:	2f 5f       	subi	r18, 0xFF	; 255
    115a:	3f 4f       	sbci	r19, 0xFF	; 255
    115c:	3f 8b       	std	Y+23, r19	; 0x17
    115e:	2e 8b       	std	Y+22, r18	; 0x16
    1160:	29 81       	ldd	r18, Y+1	; 0x01
    1162:	3a 81       	ldd	r19, Y+2	; 0x02
    1164:	a9 01       	movw	r20, r18
    1166:	4f 5f       	subi	r20, 0xFF	; 255
    1168:	5f 4f       	sbci	r21, 0xFF	; 255
    116a:	5a 83       	std	Y+2, r21	; 0x02
    116c:	49 83       	std	Y+1, r20	; 0x01
    116e:	f9 01       	movw	r30, r18
    1170:	60 81       	ld	r22, Z
    1172:	28 89       	ldd	r18, Y+16	; 0x10
    1174:	39 89       	ldd	r19, Y+17	; 0x11
    1176:	a9 01       	movw	r20, r18
    1178:	4f 5f       	subi	r20, 0xFF	; 255
    117a:	5f 4f       	sbci	r21, 0xFF	; 255
    117c:	59 8b       	std	Y+17, r21	; 0x11
    117e:	48 8b       	std	Y+16, r20	; 0x10
    1180:	f9 01       	movw	r30, r18
    1182:	20 81       	ld	r18, Z
    1184:	26 27       	eor	r18, r22
    1186:	fc 01       	movw	r30, r24
    1188:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    118a:	8e 89       	ldd	r24, Y+22	; 0x16
    118c:	9f 89       	ldd	r25, Y+23	; 0x17
    118e:	9c 01       	movw	r18, r24
    1190:	2f 5f       	subi	r18, 0xFF	; 255
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	3f 8b       	std	Y+23, r19	; 0x17
    1196:	2e 8b       	std	Y+22, r18	; 0x16
    1198:	29 81       	ldd	r18, Y+1	; 0x01
    119a:	3a 81       	ldd	r19, Y+2	; 0x02
    119c:	a9 01       	movw	r20, r18
    119e:	4f 5f       	subi	r20, 0xFF	; 255
    11a0:	5f 4f       	sbci	r21, 0xFF	; 255
    11a2:	5a 83       	std	Y+2, r21	; 0x02
    11a4:	49 83       	std	Y+1, r20	; 0x01
    11a6:	f9 01       	movw	r30, r18
    11a8:	60 81       	ld	r22, Z
    11aa:	28 89       	ldd	r18, Y+16	; 0x10
    11ac:	39 89       	ldd	r19, Y+17	; 0x11
    11ae:	a9 01       	movw	r20, r18
    11b0:	4f 5f       	subi	r20, 0xFF	; 255
    11b2:	5f 4f       	sbci	r21, 0xFF	; 255
    11b4:	59 8b       	std	Y+17, r21	; 0x11
    11b6:	48 8b       	std	Y+16, r20	; 0x10
    11b8:	f9 01       	movw	r30, r18
    11ba:	20 81       	ld	r18, Z
    11bc:	26 27       	eor	r18, r22
    11be:	fc 01       	movw	r30, r24
    11c0:	20 83       	st	Z, r18
        // k12-k15 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    11c2:	8e 89       	ldd	r24, Y+22	; 0x16
    11c4:	9f 89       	ldd	r25, Y+23	; 0x17
    11c6:	9c 01       	movw	r18, r24
    11c8:	2f 5f       	subi	r18, 0xFF	; 255
    11ca:	3f 4f       	sbci	r19, 0xFF	; 255
    11cc:	3f 8b       	std	Y+23, r19	; 0x17
    11ce:	2e 8b       	std	Y+22, r18	; 0x16
    11d0:	29 81       	ldd	r18, Y+1	; 0x01
    11d2:	3a 81       	ldd	r19, Y+2	; 0x02
    11d4:	a9 01       	movw	r20, r18
    11d6:	4f 5f       	subi	r20, 0xFF	; 255
    11d8:	5f 4f       	sbci	r21, 0xFF	; 255
    11da:	5a 83       	std	Y+2, r21	; 0x02
    11dc:	49 83       	std	Y+1, r20	; 0x01
    11de:	f9 01       	movw	r30, r18
    11e0:	60 81       	ld	r22, Z
    11e2:	28 89       	ldd	r18, Y+16	; 0x10
    11e4:	39 89       	ldd	r19, Y+17	; 0x11
    11e6:	a9 01       	movw	r20, r18
    11e8:	4f 5f       	subi	r20, 0xFF	; 255
    11ea:	5f 4f       	sbci	r21, 0xFF	; 255
    11ec:	59 8b       	std	Y+17, r21	; 0x11
    11ee:	48 8b       	std	Y+16, r20	; 0x10
    11f0:	f9 01       	movw	r30, r18
    11f2:	20 81       	ld	r18, Z
    11f4:	26 27       	eor	r18, r22
    11f6:	fc 01       	movw	r30, r24
    11f8:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    11fa:	8e 89       	ldd	r24, Y+22	; 0x16
    11fc:	9f 89       	ldd	r25, Y+23	; 0x17
    11fe:	9c 01       	movw	r18, r24
    1200:	2f 5f       	subi	r18, 0xFF	; 255
    1202:	3f 4f       	sbci	r19, 0xFF	; 255
    1204:	3f 8b       	std	Y+23, r19	; 0x17
    1206:	2e 8b       	std	Y+22, r18	; 0x16
    1208:	29 81       	ldd	r18, Y+1	; 0x01
    120a:	3a 81       	ldd	r19, Y+2	; 0x02
    120c:	a9 01       	movw	r20, r18
    120e:	4f 5f       	subi	r20, 0xFF	; 255
    1210:	5f 4f       	sbci	r21, 0xFF	; 255
    1212:	5a 83       	std	Y+2, r21	; 0x02
    1214:	49 83       	std	Y+1, r20	; 0x01
    1216:	f9 01       	movw	r30, r18
    1218:	60 81       	ld	r22, Z
    121a:	28 89       	ldd	r18, Y+16	; 0x10
    121c:	39 89       	ldd	r19, Y+17	; 0x11
    121e:	a9 01       	movw	r20, r18
    1220:	4f 5f       	subi	r20, 0xFF	; 255
    1222:	5f 4f       	sbci	r21, 0xFF	; 255
    1224:	59 8b       	std	Y+17, r21	; 0x11
    1226:	48 8b       	std	Y+16, r20	; 0x10
    1228:	f9 01       	movw	r30, r18
    122a:	20 81       	ld	r18, Z
    122c:	26 27       	eor	r18, r22
    122e:	fc 01       	movw	r30, r24
    1230:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    1232:	8e 89       	ldd	r24, Y+22	; 0x16
    1234:	9f 89       	ldd	r25, Y+23	; 0x17
    1236:	9c 01       	movw	r18, r24
    1238:	2f 5f       	subi	r18, 0xFF	; 255
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	3f 8b       	std	Y+23, r19	; 0x17
    123e:	2e 8b       	std	Y+22, r18	; 0x16
    1240:	29 81       	ldd	r18, Y+1	; 0x01
    1242:	3a 81       	ldd	r19, Y+2	; 0x02
    1244:	a9 01       	movw	r20, r18
    1246:	4f 5f       	subi	r20, 0xFF	; 255
    1248:	5f 4f       	sbci	r21, 0xFF	; 255
    124a:	5a 83       	std	Y+2, r21	; 0x02
    124c:	49 83       	std	Y+1, r20	; 0x01
    124e:	f9 01       	movw	r30, r18
    1250:	60 81       	ld	r22, Z
    1252:	28 89       	ldd	r18, Y+16	; 0x10
    1254:	39 89       	ldd	r19, Y+17	; 0x11
    1256:	a9 01       	movw	r20, r18
    1258:	4f 5f       	subi	r20, 0xFF	; 255
    125a:	5f 4f       	sbci	r21, 0xFF	; 255
    125c:	59 8b       	std	Y+17, r21	; 0x11
    125e:	48 8b       	std	Y+16, r20	; 0x10
    1260:	f9 01       	movw	r30, r18
    1262:	20 81       	ld	r18, Z
    1264:	26 27       	eor	r18, r22
    1266:	fc 01       	movw	r30, r24
    1268:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    126a:	8e 89       	ldd	r24, Y+22	; 0x16
    126c:	9f 89       	ldd	r25, Y+23	; 0x17
    126e:	9c 01       	movw	r18, r24
    1270:	2f 5f       	subi	r18, 0xFF	; 255
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
    1274:	3f 8b       	std	Y+23, r19	; 0x17
    1276:	2e 8b       	std	Y+22, r18	; 0x16
    1278:	29 81       	ldd	r18, Y+1	; 0x01
    127a:	3a 81       	ldd	r19, Y+2	; 0x02
    127c:	a9 01       	movw	r20, r18
    127e:	4f 5f       	subi	r20, 0xFF	; 255
    1280:	5f 4f       	sbci	r21, 0xFF	; 255
    1282:	5a 83       	std	Y+2, r21	; 0x02
    1284:	49 83       	std	Y+1, r20	; 0x01
    1286:	f9 01       	movw	r30, r18
    1288:	60 81       	ld	r22, Z
    128a:	28 89       	ldd	r18, Y+16	; 0x10
    128c:	39 89       	ldd	r19, Y+17	; 0x11
    128e:	a9 01       	movw	r20, r18
    1290:	4f 5f       	subi	r20, 0xFF	; 255
    1292:	5f 4f       	sbci	r21, 0xFF	; 255
    1294:	59 8b       	std	Y+17, r21	; 0x11
    1296:	48 8b       	std	Y+16, r20	; 0x10
    1298:	f9 01       	movw	r30, r18
    129a:	20 81       	ld	r18, Z
    129c:	26 27       	eor	r18, r22
    129e:	fc 01       	movw	r30, r24
    12a0:	20 83       	st	Z, r18

    for (i = 0; i < 16; ++i) {
        roundkeys[i]=i;
    }
    last4bytes = roundkeys-4;
    for (i = 0 ; i < AES_ROUNDS; ++i ) {
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	8f 5f       	subi	r24, 0xFF	; 255
    12a6:	8b 83       	std	Y+3, r24	; 0x03
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	8a 30       	cpi	r24, 0x0A	; 10
    12ac:	08 f4       	brcc	.+2      	; 0x12b0 <aes_key_schedule_128+0x48c>
    12ae:	df cd       	rjmp	.-1090   	; 0xe6e <aes_key_schedule_128+0x4a>
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    }
}
    12b0:	00 00       	nop
    12b2:	67 96       	adiw	r28, 0x17	; 23
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	08 95       	ret

000012c4 <main>:
	//0xfe, 0xdc, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10,
	0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
	0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
};

int main(int argc, char *argv[]) {
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	cd 5c       	subi	r28, 0xCD	; 205
    12ce:	d1 09       	sbc	r29, r1
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	9e 01       	movw	r18, r28
    12dc:	26 53       	subi	r18, 0x36	; 54
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	f9 01       	movw	r30, r18
    12e2:	91 83       	std	Z+1, r25	; 0x01
    12e4:	80 83       	st	Z, r24
    12e6:	ce 01       	movw	r24, r28
    12e8:	84 53       	subi	r24, 0x34	; 52
    12ea:	9f 4f       	sbci	r25, 0xFF	; 255
    12ec:	fc 01       	movw	r30, r24
    12ee:	71 83       	std	Z+1, r23	; 0x01
    12f0:	60 83       	st	Z, r22

 
	 uint8_t ciphertext[AES_BLOCK_SIZE];


	const uint8_t*plaintext1=plaintext;
    12f2:	88 e7       	ldi	r24, 0x78	; 120
    12f4:	92 e0       	ldi	r25, 0x02	; 2
    12f6:	9b 83       	std	Y+3, r25	; 0x03
    12f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t roundkeys[AES_ROUND_KEY_SIZE];

	// key schedule
	aes_key_schedule_128(roundkeys);
    12fa:	ce 01       	movw	r24, r28
    12fc:	4a 96       	adiw	r24, 0x1a	; 26
    12fe:	0e 94 12 07 	call	0xe24	; 0xe24 <aes_key_schedule_128>

	// encryption
	aes_encrypt_128(roundkeys, plaintext1, ciphertext);
    1302:	ae 01       	movw	r20, r28
    1304:	46 5f       	subi	r20, 0xF6	; 246
    1306:	5f 4f       	sbci	r21, 0xFF	; 255
    1308:	2a 81       	ldd	r18, Y+2	; 0x02
    130a:	3b 81       	ldd	r19, Y+3	; 0x03
    130c:	ce 01       	movw	r24, r28
    130e:	4a 96       	adiw	r24, 0x1a	; 26
    1310:	b9 01       	movw	r22, r18
    1312:	0e 94 1f 05 	call	0xa3e	; 0xa3e <aes_encrypt_128>

	for (i = 0; i < AES_BLOCK_SIZE; i++) {
    1316:	19 82       	std	Y+1, r1	; 0x01
    1318:	1c c0       	rjmp	.+56     	; 0x1352 <main+0x8e>
		if ( ciphertext[i] != pgm_read_byte(&const_cipher[i]) ) { break; }
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	9e 01       	movw	r18, r28
    1322:	26 5f       	subi	r18, 0xF6	; 246
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	82 0f       	add	r24, r18
    1328:	93 1f       	adc	r25, r19
    132a:	fc 01       	movw	r30, r24
    132c:	20 81       	ld	r18, Z
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	88 2f       	mov	r24, r24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	88 59       	subi	r24, 0x98	; 152
    1336:	9d 4f       	sbci	r25, 0xFD	; 253
    1338:	9d 83       	std	Y+5, r25	; 0x05
    133a:	8c 83       	std	Y+4, r24	; 0x04
    133c:	8c 81       	ldd	r24, Y+4	; 0x04
    133e:	9d 81       	ldd	r25, Y+5	; 0x05
    1340:	fc 01       	movw	r30, r24
    1342:	84 91       	lpm	r24, Z
    1344:	8e 83       	std	Y+6, r24	; 0x06
    1346:	8e 81       	ldd	r24, Y+6	; 0x06
    1348:	28 17       	cp	r18, r24
    134a:	39 f4       	brne	.+14     	; 0x135a <main+0x96>
	aes_key_schedule_128(roundkeys);

	// encryption
	aes_encrypt_128(roundkeys, plaintext1, ciphertext);

	for (i = 0; i < AES_BLOCK_SIZE; i++) {
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	80 31       	cpi	r24, 0x10	; 16
    1356:	08 f3       	brcs	.-62     	; 0x131a <main+0x56>
    1358:	01 c0       	rjmp	.+2      	; 0x135c <main+0x98>
		if ( ciphertext[i] != pgm_read_byte(&const_cipher[i]) ) { break; }
    135a:	00 00       	nop
	}


	// decryption
	aes_decrypt_128(roundkeys, ciphertext, ciphertext);
    135c:	ae 01       	movw	r20, r28
    135e:	46 5f       	subi	r20, 0xF6	; 246
    1360:	5f 4f       	sbci	r21, 0xFF	; 255
    1362:	9e 01       	movw	r18, r28
    1364:	26 5f       	subi	r18, 0xF6	; 246
    1366:	3f 4f       	sbci	r19, 0xFF	; 255
    1368:	ce 01       	movw	r24, r28
    136a:	4a 96       	adiw	r24, 0x1a	; 26
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <aes_decrypt_128>
	for (i = 0; i < AES_BLOCK_SIZE; i++) {
    1372:	19 82       	std	Y+1, r1	; 0x01
    1374:	1c c0       	rjmp	.+56     	; 0x13ae <main+0xea>
		if ( ciphertext[i] != pgm_read_byte(&plaintext[i]) ) { break; }
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	88 2f       	mov	r24, r24
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	9e 01       	movw	r18, r28
    137e:	26 5f       	subi	r18, 0xF6	; 246
    1380:	3f 4f       	sbci	r19, 0xFF	; 255
    1382:	82 0f       	add	r24, r18
    1384:	93 1f       	adc	r25, r19
    1386:	fc 01       	movw	r30, r24
    1388:	20 81       	ld	r18, Z
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	88 2f       	mov	r24, r24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	88 58       	subi	r24, 0x88	; 136
    1392:	9d 4f       	sbci	r25, 0xFD	; 253
    1394:	98 87       	std	Y+8, r25	; 0x08
    1396:	8f 83       	std	Y+7, r24	; 0x07
    1398:	8f 81       	ldd	r24, Y+7	; 0x07
    139a:	98 85       	ldd	r25, Y+8	; 0x08
    139c:	fc 01       	movw	r30, r24
    139e:	84 91       	lpm	r24, Z
    13a0:	89 87       	std	Y+9, r24	; 0x09
    13a2:	89 85       	ldd	r24, Y+9	; 0x09
    13a4:	28 17       	cp	r18, r24
    13a6:	39 f4       	brne	.+14     	; 0x13b6 <main+0xf2>
	}


	// decryption
	aes_decrypt_128(roundkeys, ciphertext, ciphertext);
	for (i = 0; i < AES_BLOCK_SIZE; i++) {
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	8f 5f       	subi	r24, 0xFF	; 255
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	80 31       	cpi	r24, 0x10	; 16
    13b2:	08 f3       	brcs	.-62     	; 0x1376 <main+0xb2>
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <main+0xf4>
		if ( ciphertext[i] != pgm_read_byte(&plaintext[i]) ) { break; }
    13b6:	00 00       	nop
	}

	return 0;
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
}
    13bc:	c3 53       	subi	r28, 0x33	; 51
    13be:	df 4f       	sbci	r29, 0xFF	; 255
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	08 95       	ret

000013d0 <_exit>:
    13d0:	f8 94       	cli

000013d2 <__stop_program>:
    13d2:	ff cf       	rjmp	.-2      	; 0x13d2 <__stop_program>
